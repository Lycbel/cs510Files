
if (typeof(window['CODES']) === 'undefined') {
    window['CODES'] = {}
}
window['CODES']['3df08136-77a1-4202-b788-f3dc266681b8'] = '<div class="3df08136-77a1-4202-b788-f3dc266681b8 pre"><span class="line-1 line"><span class="lineno">  1 </span><span class="cm">/* Copyright 2008, Google Inc.</span><sup class="after"></sup>\n' + 
'</span><span class="line-2 line"><span class="lineno">  2 </span><span class="cm"> * All rights reserved.</span><sup class="after"></sup>\n' + 
'</span><span class="line-3 line"><span class="lineno">  3 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-4 line"><span class="lineno">  4 </span><span class="cm"> * Redistribution and use in source and binary forms, with or without</span><sup class="after"></sup>\n' + 
'</span><span class="line-5 line"><span class="lineno">  5 </span><span class="cm"> * modification, are permitted provided that the following conditions are</span><sup class="after"></sup>\n' + 
'</span><span class="line-6 line"><span class="lineno">  6 </span><span class="cm"> * met:</span><sup class="after"></sup>\n' + 
'</span><span class="line-7 line"><span class="lineno">  7 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-8 line"><span class="lineno">  8 </span><span class="cm"> *     * Redistributions of source code must retain the above copyright</span><sup class="after"></sup>\n' + 
'</span><span class="line-9 line"><span class="lineno">  9 </span><span class="cm"> * notice, this list of conditions and the following disclaimer.</span><sup class="after"></sup>\n' + 
'</span><span class="line-10 line"><span class="lineno"> 10 </span><span class="cm"> *     * Redistributions in binary form must reproduce the above</span><sup class="after"></sup>\n' + 
'</span><span class="line-11 line"><span class="lineno"> 11 </span><span class="cm"> * copyright notice, this list of conditions and the following disclaimer</span><sup class="after"></sup>\n' + 
'</span><span class="line-12 line"><span class="lineno"> 12 </span><span class="cm"> * in the documentation and/or other materials provided with the</span><sup class="after"></sup>\n' + 
'</span><span class="line-13 line"><span class="lineno"> 13 </span><span class="cm"> * distribution.</span><sup class="after"></sup>\n' + 
'</span><span class="line-14 line"><span class="lineno"> 14 </span><span class="cm"> *     * Neither the name of Google Inc. nor the names of its</span><sup class="after"></sup>\n' + 
'</span><span class="line-15 line"><span class="lineno"> 15 </span><span class="cm"> * contributors may be used to endorse or promote products derived from</span><sup class="after"></sup>\n' + 
'</span><span class="line-16 line"><span class="lineno"> 16 </span><span class="cm"> * this software without specific prior written permission.</span><sup class="after"></sup>\n' + 
'</span><span class="line-17 line"><span class="lineno"> 17 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-18 line"><span class="lineno"> 18 </span><span class="cm"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span><sup class="after"></sup>\n' + 
'</span><span class="line-19 line"><span class="lineno"> 19 </span><span class="cm"> * &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span><sup class="after"></sup>\n' + 
'</span><span class="line-20 line"><span class="lineno"> 20 </span><span class="cm"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span><sup class="after"></sup>\n' + 
'</span><span class="line-21 line"><span class="lineno"> 21 </span><span class="cm"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span><sup class="after"></sup>\n' + 
'</span><span class="line-22 line"><span class="lineno"> 22 </span><span class="cm"> * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</span><sup class="after"></sup>\n' + 
'</span><span class="line-23 line"><span class="lineno"> 23 </span><span class="cm"> * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span><sup class="after"></sup>\n' + 
'</span><span class="line-24 line"><span class="lineno"> 24 </span><span class="cm"> * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span><sup class="after"></sup>\n' + 
'</span><span class="line-25 line"><span class="lineno"> 25 </span><span class="cm"> * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span><sup class="after"></sup>\n' + 
'</span><span class="line-26 line"><span class="lineno"> 26 </span><span class="cm"> * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span><sup class="after"></sup>\n' + 
'</span><span class="line-27 line"><span class="lineno"> 27 </span><span class="cm"> * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span><sup class="after"></sup>\n' + 
'</span><span class="line-28 line"><span class="lineno"> 28 </span><span class="cm"> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span><sup class="after"></sup>\n' + 
'</span><span class="line-29 line"><span class="lineno"> 29 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-30 line"><span class="lineno"> 30 </span><span class="cm"> * curve25519-donna: Curve25519 elliptic curve, public key function</span><sup class="after"></sup>\n' + 
'</span><span class="line-31 line"><span class="lineno"> 31 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-32 line"><span class="lineno"> 32 </span><span class="cm"> * http://code.google.com/p/curve25519-donna/</span><sup class="after"></sup>\n' + 
'</span><span class="line-33 line"><span class="lineno"> 33 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-34 line"><span class="lineno"> 34 </span><span class="cm"> * Adam Langley &lt;agl@imperialviolet.org&gt;</span><sup class="after"></sup>\n' + 
'</span><span class="line-35 line"><span class="lineno"> 35 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-36 line"><span class="lineno"> 36 </span><span class="cm"> * Derived from public domain C code by Daniel J. Bernstein &lt;djb@cr.yp.to&gt;</span><sup class="after"></sup>\n' + 
'</span><span class="line-37 line"><span class="lineno"> 37 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-38 line"><span class="lineno"> 38 </span><span class="cm"> * More information about curve25519 can be found here</span><sup class="after"></sup>\n' + 
'</span><span class="line-39 line"><span class="lineno"> 39 </span><span class="cm"> *   http://cr.yp.to/ecdh.html</span><sup class="after"></sup>\n' + 
'</span><span class="line-40 line"><span class="lineno"> 40 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-41 line"><span class="lineno"> 41 </span><span class="cm"> * djb&#39;s sample implementation of curve25519 is written in a special assembly</span><sup class="after"></sup>\n' + 
'</span><span class="line-42 line"><span class="lineno"> 42 </span><span class="cm"> * language called qhasm and uses the floating point registers.</span><sup class="after"></sup>\n' + 
'</span><span class="line-43 line"><span class="lineno"> 43 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-44 line"><span class="lineno"> 44 </span><span class="cm"> * This is, almost, a clean room reimplementation from the curve25519 paper. It</span><sup class="after"></sup>\n' + 
'</span><span class="line-45 line"><span class="lineno"> 45 </span><span class="cm"> * uses many of the tricks described therein. Only the crecip function is taken</span><sup class="after"></sup>\n' + 
'</span><span class="line-46 line"><span class="lineno"> 46 </span><span class="cm"> * from the sample implementation. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-47 line"><span class="lineno"> 47 </span><sup class="after"></sup>\n' + 
'</span><span class="line-48 line"><span class="lineno"> 48 </span><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp"></span><sup class="after"></sup>\n' + 
'</span><span class="line-49 line"><span class="lineno"> 49 </span><span class="cp">#include</span> <span class="cpf">&quot;../config.h&quot;</span><span class="cp"></span><sup class="after"></sup>\n' + 
'</span><span class="line-50 line"><span class="lineno"> 50 </span><sup class="after"></sup>\n' + 
'</span><span class="line-51 line"><span class="lineno"> 51 </span><span class="cm">/* Field element representation:</span><sup class="after"></sup>\n' + 
'</span><span class="line-52 line"><span class="lineno"> 52 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-53 line"><span class="lineno"> 53 </span><span class="cm"> * Field elements are written as an array of signed, 64-bit limbs, least</span><sup class="after"></sup>\n' + 
'</span><span class="line-54 line"><span class="lineno"> 54 </span><span class="cm"> * significant first. The value of the field element is:</span><sup class="after"></sup>\n' + 
'</span><span class="line-55 line"><span class="lineno"> 55 </span><span class="cm"> *   x[0] + 2^26·x[1] + x^51·x[2] + 2^102·x[3] + ...</span><sup class="after"></sup>\n' + 
'</span><span class="line-56 line"><span class="lineno"> 56 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-57 line"><span class="lineno"> 57 </span><span class="cm"> * i.e. the limbs are 26, 25, 26, 25, ... bits wide. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-58 line"><span class="lineno"> 58 </span><sup class="after"></sup>\n' + 
'</span><span class="line-59 line"><span class="lineno"> 59 </span><span class="cm">/* Sum two numbers: output += in */</span><sup class="after"></sup>\n' + 
'</span><span class="line-60 line"><span class="lineno"> 60 </span><span class="k">static</span> <span class="kt">void</span><sup class="after"></sup>\n' + 
'</span><span class="line-61 line"><span class="lineno"> 61 </span><span class="nf">fsum</span><span class="p">(</span><span class="kt">int64_t</span> <span class="o">*</span><span class="n">output</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int64_t</span> <span class="o">*</span><span class="n">in</span><span class="p">)</span><sup class="after"></sup>\n' + 
'</span><span class="line-62 line"><span class="lineno"> 62 </span><span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-63 line"><span class="lineno"> 63 </span>  <span class="kt">unsigned</span> <span class="n">i</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-64 line"><span class="lineno"> 64 </span>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-65 line"><span class="lineno"> 65 </span>    <span class="n">output</span><span class="p">[</span><span class="mi">0</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">output</span><span class="p">[</span><span class="mi">0</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">in</span><span class="p">[</span><span class="mi">0</span><span class="o">+</span><span class="n">i</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-66 line"><span class="lineno"> 66 </span>    <span class="n">output</span><span class="p">[</span><span class="mi">1</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">output</span><span class="p">[</span><span class="mi">1</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">in</span><span class="p">[</span><span class="mi">1</span><span class="o">+</span><span class="n">i</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-67 line"><span class="lineno"> 67 </span>  <span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-68 line"><span class="lineno"> 68 </span><span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-69 line"><span class="lineno"> 69 </span><sup class="after"></sup>\n' + 
'</span><span class="line-70 line"><span class="lineno"> 70 </span><span class="cm">/* Find the difference of two numbers: output = in - output</span><sup class="after"></sup>\n' + 
'</span><span class="line-71 line"><span class="lineno"> 71 </span><span class="cm"> * (note the order of the arguments!). */</span><sup class="after"></sup>\n' + 
'</span><span class="line-72 line"><span class="lineno"> 72 </span><span class="k">static</span> <span class="kt">void</span><sup class="after"></sup>\n' + 
'</span><span class="line-73 line"><span class="lineno"> 73 </span><span class="nf">fdifference</span><span class="p">(</span><span class="kt">int64_t</span> <span class="o">*</span><span class="n">output</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int64_t</span> <span class="o">*</span><span class="n">in</span><span class="p">)</span><sup class="after"></sup>\n' + 
'</span><span class="line-74 line"><span class="lineno"> 74 </span><span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-75 line"><span class="lineno"> 75 </span>  <span class="kt">unsigned</span> <span class="n">i</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-76 line"><span class="lineno"> 76 </span>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-77 line"><span class="lineno"> 77 </span>    <span class="n">output</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">in</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">output</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-78 line"><span class="lineno"> 78 </span>  <span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-79 line"><span class="lineno"> 79 </span><span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-80 line"><span class="lineno"> 80 </span><sup class="after"></sup>\n' + 
'</span><span class="line-81 line"><span class="lineno"> 81 </span><span class="cm">/* Multiply a number by a scalar: output = in * scalar */</span><sup class="after"></sup>\n' + 
'</span><span class="line-82 line"><span class="lineno"> 82 </span><span class="k">static</span> <span class="kt">void</span><sup class="after"></sup>\n' + 
'</span><span class="line-83 line"><span class="lineno"> 83 </span><span class="nf">fscalar_product</span><span class="p">(</span><span class="kt">int64_t</span> <span class="o">*</span><span class="n">output</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int64_t</span> <span class="o">*</span><span class="n">in</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int64_t</span> <span class="n">scalar</span><span class="p">)</span><sup class="after"></sup>\n' + 
'</span><span class="line-84 line"><span class="lineno"> 84 </span><span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-85 line"><span class="lineno"> 85 </span>  <span class="kt">unsigned</span> <span class="n">i</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-86 line"><span class="lineno"> 86 </span>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-87 line"><span class="lineno"> 87 </span>    <span class="n">output</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">in</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">scalar</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-88 line"><span class="lineno"> 88 </span>  <span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-89 line"><span class="lineno"> 89 </span><span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-90 line"><span class="lineno"> 90 </span><sup class="after"></sup>\n' + 
'</span><span class="line-91 line"><span class="lineno"> 91 </span><span class="cm">/* Multiply two numbers: output = in2 * in</span><sup class="after"></sup>\n' + 
'</span><span class="line-92 line"><span class="lineno"> 92 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-93 line"><span class="lineno"> 93 </span><span class="cm"> * output must be distinct to both inputs. The inputs are reduced coefficient</span><sup class="after"></sup>\n' + 
'</span><span class="line-94 line"><span class="lineno"> 94 </span><span class="cm"> * form, the output is not.</span><sup class="after"></sup>\n' + 
'</span><span class="line-95 line"><span class="lineno"> 95 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-96 line"><span class="lineno"> 96 </span><span class="cm"> * output[x] &lt;= 14 * the largest product of the input limbs. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-97 line"><span class="lineno"> 97 </span><span class="k">static</span> <span class="kt">void</span><sup class="after"></sup>\n' + 
'</span><span class="line-98 line"><span class="lineno"> 98 </span><span class="nf">fproduct</span><span class="p">(</span><span class="kt">int64_t</span> <span class="o">*</span><span class="n">output</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int64_t</span> <span class="o">*</span><span class="n">in2</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int64_t</span> <span class="o">*</span><span class="n">in</span><span class="p">)</span><sup class="after"></sup>\n' + 
'</span><span class="line-99 line"><span class="lineno"> 99 </span><span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-100 line"><span class="lineno">100 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span>       <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><sup class="after"></sup>\n' + 
'</span><span class="line-101 line"><span class="lineno">101 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span>       <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-102 line"><span class="lineno">102 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><sup class="after"></sup>\n' + 
'</span><span class="line-103 line"><span class="lineno">103 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span>  <span class="mi">2</span> <span class="o">*</span>  <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-104 line"><span class="lineno">104 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-105 line"><span class="lineno">105 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><sup class="after"></sup>\n' + 
'</span><span class="line-106 line"><span class="lineno">106 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span>       <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-107 line"><span class="lineno">107 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-108 line"><span class="lineno">108 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-109 line"><span class="lineno">109 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">3</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><sup class="after"></sup>\n' + 
'</span><span class="line-110 line"><span class="lineno">110 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span>       <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-111 line"><span class="lineno">111 </span>               <span class="mi">2</span> <span class="o">*</span> <span class="p">(((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-112 line"><span class="lineno">112 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">3</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-113 line"><span class="lineno">113 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-114 line"><span class="lineno">114 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">4</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><sup class="after"></sup>\n' + 
'</span><span class="line-115 line"><span class="lineno">115 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span>       <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-116 line"><span class="lineno">116 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">3</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-117 line"><span class="lineno">117 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-118 line"><span class="lineno">118 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">4</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-119 line"><span class="lineno">119 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-120 line"><span class="lineno">120 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">5</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><sup class="after"></sup>\n' + 
'</span><span class="line-121 line"><span class="lineno">121 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span>  <span class="mi">2</span> <span class="o">*</span> <span class="p">(((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">3</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-122 line"><span class="lineno">122 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-123 line"><span class="lineno">123 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">5</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-124 line"><span class="lineno">124 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-125 line"><span class="lineno">125 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">4</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-126 line"><span class="lineno">126 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-127 line"><span class="lineno">127 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">6</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><sup class="after"></sup>\n' + 
'</span><span class="line-128 line"><span class="lineno">128 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span>       <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">3</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-129 line"><span class="lineno">129 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">4</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-130 line"><span class="lineno">130 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-131 line"><span class="lineno">131 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">5</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-132 line"><span class="lineno">132 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-133 line"><span class="lineno">133 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">6</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-134 line"><span class="lineno">134 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-135 line"><span class="lineno">135 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">7</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><sup class="after"></sup>\n' + 
'</span><span class="line-136 line"><span class="lineno">136 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="o">=</span>       <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">4</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-137 line"><span class="lineno">137 </span>               <span class="mi">2</span> <span class="o">*</span> <span class="p">(((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">3</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-138 line"><span class="lineno">138 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">5</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-139 line"><span class="lineno">139 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-140 line"><span class="lineno">140 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">7</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-141 line"><span class="lineno">141 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-142 line"><span class="lineno">142 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">6</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-143 line"><span class="lineno">143 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">8</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-144 line"><span class="lineno">144 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">8</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><sup class="after"></sup>\n' + 
'</span><span class="line-145 line"><span class="lineno">145 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">=</span>       <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">4</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-146 line"><span class="lineno">146 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">5</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-147 line"><span class="lineno">147 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">3</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-148 line"><span class="lineno">148 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">6</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-149 line"><span class="lineno">149 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-150 line"><span class="lineno">150 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">7</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-151 line"><span class="lineno">151 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">8</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-152 line"><span class="lineno">152 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">8</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-153 line"><span class="lineno">153 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">9</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-154 line"><span class="lineno">154 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">9</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><sup class="after"></sup>\n' + 
'</span><span class="line-155 line"><span class="lineno">155 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">5</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-156 line"><span class="lineno">156 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">3</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-157 line"><span class="lineno">157 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">7</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-158 line"><span class="lineno">158 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">9</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-159 line"><span class="lineno">159 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">9</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-160 line"><span class="lineno">160 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">4</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-161 line"><span class="lineno">161 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">6</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-162 line"><span class="lineno">162 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">8</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-163 line"><span class="lineno">163 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">8</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><sup class="after"></sup>\n' + 
'</span><span class="line-164 line"><span class="lineno">164 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> <span class="o">=</span>      <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">5</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-165 line"><span class="lineno">165 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">6</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-166 line"><span class="lineno">166 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">4</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-167 line"><span class="lineno">167 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">7</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-168 line"><span class="lineno">168 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">3</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">8</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-169 line"><span class="lineno">169 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">8</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-170 line"><span class="lineno">170 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">9</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-171 line"><span class="lineno">171 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">9</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><sup class="after"></sup>\n' + 
'</span><span class="line-172 line"><span class="lineno">172 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span> <span class="o">=</span>      <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">6</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-173 line"><span class="lineno">173 </span>               <span class="mi">2</span> <span class="o">*</span> <span class="p">(((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">5</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-174 line"><span class="lineno">174 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">7</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-175 line"><span class="lineno">175 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">3</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">9</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-176 line"><span class="lineno">176 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">9</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">3</span><span class="p">]))</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-177 line"><span class="lineno">177 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">4</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">8</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-178 line"><span class="lineno">178 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">8</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">4</span><span class="p">]);</span><sup class="after"></sup>\n' + 
'</span><span class="line-179 line"><span class="lineno">179 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span> <span class="o">=</span>      <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">6</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-180 line"><span class="lineno">180 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">7</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-181 line"><span class="lineno">181 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">5</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">8</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-182 line"><span class="lineno">182 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">8</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-183 line"><span class="lineno">183 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">4</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">9</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-184 line"><span class="lineno">184 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">9</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">4</span><span class="p">]);</span><sup class="after"></sup>\n' + 
'</span><span class="line-185 line"><span class="lineno">185 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">7</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-186 line"><span class="lineno">186 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">5</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">9</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-187 line"><span class="lineno">187 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">9</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">5</span><span class="p">]))</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-188 line"><span class="lineno">188 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">6</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">8</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-189 line"><span class="lineno">189 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">8</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">6</span><span class="p">]);</span><sup class="after"></sup>\n' + 
'</span><span class="line-190 line"><span class="lineno">190 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span> <span class="o">=</span>      <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">7</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">8</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-191 line"><span class="lineno">191 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">8</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-192 line"><span class="lineno">192 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">6</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">9</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-193 line"><span class="lineno">193 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">9</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">6</span><span class="p">]);</span><sup class="after"></sup>\n' + 
'</span><span class="line-194 line"><span class="lineno">194 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span>      <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">8</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">8</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-195 line"><span class="lineno">195 </span>               <span class="mi">2</span> <span class="o">*</span> <span class="p">(((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">7</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">9</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-196 line"><span class="lineno">196 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">9</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">7</span><span class="p">]));</span><sup class="after"></sup>\n' + 
'</span><span class="line-197 line"><span class="lineno">197 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">17</span><span class="p">]</span> <span class="o">=</span>      <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">8</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">9</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-198 line"><span class="lineno">198 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">9</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">8</span><span class="p">]);</span><sup class="after"></sup>\n' + 
'</span><span class="line-199 line"><span class="lineno">199 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">18</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span>  <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in2</span><span class="p">[</span><span class="mi">9</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">9</span><span class="p">]);</span><sup class="after"></sup>\n' + 
'</span><span class="line-200 line"><span class="lineno">200 </span><span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-201 line"><span class="lineno">201 </span><sup class="after"></sup>\n' + 
'</span><span class="line-202 line"><span class="lineno">202 </span><span class="cm">/* Reduce a long form to a short form by taking the input mod 2^255 - 19.</span><sup class="after"></sup>\n' + 
'</span><span class="line-203 line"><span class="lineno">203 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-204 line"><span class="lineno">204 </span><span class="cm"> * On entry: |output[i]| &lt; 14*2^54</span><sup class="after"></sup>\n' + 
'</span><span class="line-205 line"><span class="lineno">205 </span><span class="cm"> * On exit: |output[0..8]| &lt; 280*2^54 */</span><sup class="after"></sup>\n' + 
'</span><span class="line-206 line"><span class="lineno">206 </span><span class="k">static</span> <span class="kt">void</span><sup class="after"></sup>\n' + 
'</span><span class="line-207 line"><span class="lineno">207 </span><span class="nf">freduce_degree</span><span class="p">(</span><span class="kt">int64_t</span> <span class="o">*</span><span class="n">output</span><span class="p">)</span><sup class="after"></sup>\n' + 
'</span><span class="line-208 line"><span class="lineno">208 </span><span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-209 line"><span class="lineno">209 </span>  <span class="cm">/* Each of these shifts and adds ends up multiplying the value by 19.</span><sup class="after"></sup>\n' + 
'</span><span class="line-210 line"><span class="lineno">210 </span><span class="cm">   *</span><sup class="after"></sup>\n' + 
'</span><span class="line-211 line"><span class="lineno">211 </span><span class="cm">   * For output[0..8], the absolute entry value is &lt; 14*2^54 and we add, at</span><sup class="after"></sup>\n' + 
'</span><span class="line-212 line"><span class="lineno">212 </span><span class="cm">   * most, 19*14*2^54 thus, on exit, |output[0..8]| &lt; 280*2^54. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-213 line"><span class="lineno">213 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">18</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-214 line"><span class="lineno">214 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">18</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-215 line"><span class="lineno">215 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">18</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-216 line"><span class="lineno">216 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">17</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-217 line"><span class="lineno">217 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">17</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-218 line"><span class="lineno">218 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">17</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-219 line"><span class="lineno">219 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-220 line"><span class="lineno">220 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-221 line"><span class="lineno">221 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-222 line"><span class="lineno">222 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-223 line"><span class="lineno">223 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-224 line"><span class="lineno">224 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">15</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-225 line"><span class="lineno">225 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-226 line"><span class="lineno">226 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-227 line"><span class="lineno">227 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">14</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-228 line"><span class="lineno">228 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-229 line"><span class="lineno">229 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-230 line"><span class="lineno">230 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">13</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-231 line"><span class="lineno">231 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-232 line"><span class="lineno">232 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-233 line"><span class="lineno">233 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">12</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-234 line"><span class="lineno">234 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-235 line"><span class="lineno">235 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-236 line"><span class="lineno">236 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">11</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-237 line"><span class="lineno">237 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-238 line"><span class="lineno">238 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-239 line"><span class="lineno">239 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-240 line"><span class="lineno">240 </span><span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-241 line"><span class="lineno">241 </span><sup class="after"></sup>\n' + 
'</span><span class="line-242 line"><span class="lineno">242 </span><span class="cp">#if (-1 &amp; 3) != 3</span><sup class="after"></sup>\n' + 
'</span><span class="line-243 line"><span class="lineno">243 </span><span class="cp">#error &quot;This code only works on a two&#39;s complement system&quot;</span><sup class="after"></sup>\n' + 
'</span><span class="line-244 line"><span class="lineno">244 </span><span class="cp">#endif</span><sup class="after"></sup>\n' + 
'</span><span class="line-245 line"><span class="lineno">245 </span><sup class="after"></sup>\n' + 
'</span><span class="line-246 line"><span class="lineno">246 </span><span class="cm">/* return v / 2^26, using only shifts and adds.</span><sup class="after"></sup>\n' + 
'</span><span class="line-247 line"><span class="lineno">247 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-248 line"><span class="lineno">248 </span><span class="cm"> * On entry: v can take any value. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-249 line"><span class="lineno">249 </span><span class="k">static</span> <span class="kt">int64_t</span><sup class="after"></sup>\n' + 
'</span><span class="line-250 line"><span class="lineno">250 </span><span class="nf">div_by_2_26</span><span class="p">(</span><span class="k">const</span> <span class="kt">int64_t</span> <span class="n">v</span><span class="p">)</span><sup class="after"></sup>\n' + 
'</span><span class="line-251 line"><span class="lineno">251 </span><span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-252 line"><span class="lineno">252 </span>  <span class="cm">/* High word of v; no shift needed. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-253 line"><span class="lineno">253 </span>  <span class="k">const</span> <span class="kt">uint32_t</span> <span class="n">highword</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uint32_t</span><span class="p">)</span> <span class="p">(((</span><span class="kt">uint64_t</span><span class="p">)</span> <span class="n">v</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">32</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-254 line"><span class="lineno">254 </span>  <span class="cm">/* Set to all 1s if v was negative; else set to 0s. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-255 line"><span class="lineno">255 </span>  <span class="k">const</span> <span class="kt">int32_t</span> <span class="n">sign</span> <span class="o">=</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">highword</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-256 line"><span class="lineno">256 </span>  <span class="cm">/* Set to 0x3ffffff if v was negative; else set to 0. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-257 line"><span class="lineno">257 </span>  <span class="k">const</span> <span class="kt">int32_t</span> <span class="n">roundoff</span> <span class="o">=</span> <span class="p">((</span><span class="kt">uint32_t</span><span class="p">)</span> <span class="n">sign</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-258 line"><span class="lineno">258 </span>  <span class="cm">/* Should return v / (1&lt;&lt;26) */</span><sup class="after"></sup>\n' + 
'</span><span class="line-259 line"><span class="lineno">259 </span>  <span class="k">return</span> <span class="p">(</span><span class="n">v</span> <span class="o">+</span> <span class="n">roundoff</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">26</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-260 line"><span class="lineno">260 </span><span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-261 line"><span class="lineno">261 </span><sup class="after"></sup>\n' + 
'</span><span class="line-262 line"><span class="lineno">262 </span><span class="cm">/* return v / (2^25), using only shifts and adds.</span><sup class="after"></sup>\n' + 
'</span><span class="line-263 line"><span class="lineno">263 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-264 line"><span class="lineno">264 </span><span class="cm"> * On entry: v can take any value. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-265 line"><span class="lineno">265 </span><span class="k">static</span> <span class="kt">int64_t</span><sup class="after"></sup>\n' + 
'</span><span class="line-266 line"><span class="lineno">266 </span><span class="nf">div_by_2_25</span><span class="p">(</span><span class="k">const</span> <span class="kt">int64_t</span> <span class="n">v</span><span class="p">)</span><sup class="after"></sup>\n' + 
'</span><span class="line-267 line"><span class="lineno">267 </span><span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-268 line"><span class="lineno">268 </span>  <span class="cm">/* High word of v; no shift needed*/</span><sup class="after"></sup>\n' + 
'</span><span class="line-269 line"><span class="lineno">269 </span>  <span class="k">const</span> <span class="kt">uint32_t</span> <span class="n">highword</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uint32_t</span><span class="p">)</span> <span class="p">(((</span><span class="kt">uint64_t</span><span class="p">)</span> <span class="n">v</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">32</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-270 line"><span class="lineno">270 </span>  <span class="cm">/* Set to all 1s if v was negative; else set to 0s. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-271 line"><span class="lineno">271 </span>  <span class="k">const</span> <span class="kt">int32_t</span> <span class="n">sign</span> <span class="o">=</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">highword</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-272 line"><span class="lineno">272 </span>  <span class="cm">/* Set to 0x1ffffff if v was negative; else set to 0. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-273 line"><span class="lineno">273 </span>  <span class="k">const</span> <span class="kt">int32_t</span> <span class="n">roundoff</span> <span class="o">=</span> <span class="p">((</span><span class="kt">uint32_t</span><span class="p">)</span> <span class="n">sign</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">7</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-274 line"><span class="lineno">274 </span>  <span class="cm">/* Should return v / (1&lt;&lt;25) */</span><sup class="after"></sup>\n' + 
'</span><span class="line-275 line"><span class="lineno">275 </span>  <span class="k">return</span> <span class="p">(</span><span class="n">v</span> <span class="o">+</span> <span class="n">roundoff</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">25</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-276 line"><span class="lineno">276 </span><span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-277 line"><span class="lineno">277 </span><sup class="after"></sup>\n' + 
'</span><span class="line-278 line"><span class="lineno">278 </span><span class="cm">/* Reduce all coefficients of the short form input so that |x| &lt; 2^26.</span><sup class="after"></sup>\n' + 
'</span><span class="line-279 line"><span class="lineno">279 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-280 line"><span class="lineno">280 </span><span class="cm"> * On entry: |output[i]| &lt; 280*2^54 */</span><sup class="after"></sup>\n' + 
'</span><span class="line-281 line"><span class="lineno">281 </span><span class="k">static</span> <span class="kt">void</span><sup class="after"></sup>\n' + 
'</span><span class="line-282 line"><span class="lineno">282 </span><span class="nf">freduce_coefficients</span><span class="p">(</span><span class="kt">int64_t</span> <span class="o">*</span><span class="n">output</span><span class="p">)</span><sup class="after"></sup>\n' + 
'</span><span class="line-283 line"><span class="lineno">283 </span><span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-284 line"><span class="lineno">284 </span>  <span class="kt">unsigned</span> <span class="n">i</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-285 line"><span class="lineno">285 </span><sup class="after"></sup>\n' + 
'</span><span class="line-286 line"><span class="lineno">286 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-287 line"><span class="lineno">287 </span><sup class="after"></sup>\n' + 
'</span><span class="line-288 line"><span class="lineno">288 </span>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-289 line"><span class="lineno">289 </span>    <span class="kt">int64_t</span> <span class="n">over</span> <span class="o">=</span> <span class="n">div_by_2_26</span><span class="p">(</span><span class="n">output</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span><sup class="after"></sup>\n' + 
'</span><span class="line-290 line"><span class="lineno">290 </span>    <span class="cm">/* The entry condition (that |output[i]| &lt; 280*2^54) means that over is, at</span><sup class="after"></sup>\n' + 
'</span><span class="line-291 line"><span class="lineno">291 </span><span class="cm">     * most, 280*2^28 in the first iteration of this loop. This is added to the</span><sup class="after"></sup>\n' + 
'</span><span class="line-292 line"><span class="lineno">292 </span><span class="cm">     * next limb and we can approximate the resulting bound of that limb by</span><sup class="after"></sup>\n' + 
'</span><span class="line-293 line"><span class="lineno">293 </span><span class="cm">     * 281*2^54. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-294 line"><span class="lineno">294 </span>    <span class="n">output</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-=</span> <span class="n">over</span> <span class="o">&lt;&lt;</span> <span class="mi">26</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-295 line"><span class="lineno">295 </span>    <span class="n">output</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="n">over</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-296 line"><span class="lineno">296 </span><sup class="after"></sup>\n' + 
'</span><span class="line-297 line"><span class="lineno">297 </span>    <span class="cm">/* For the first iteration, |output[i+1]| &lt; 281*2^54, thus |over| &lt;</span><sup class="after"></sup>\n' + 
'</span><span class="line-298 line"><span class="lineno">298 </span><span class="cm">     * 281*2^29. When this is added to the next limb, the resulting bound can</span><sup class="after"></sup>\n' + 
'</span><span class="line-299 line"><span class="lineno">299 </span><span class="cm">     * be approximated as 281*2^54.</span><sup class="after"></sup>\n' + 
'</span><span class="line-300 line"><span class="lineno">300 </span><span class="cm">     *</span><sup class="after"></sup>\n' + 
'</span><span class="line-301 line"><span class="lineno">301 </span><span class="cm">     * For subsequent iterations of the loop, 281*2^54 remains a conservative</span><sup class="after"></sup>\n' + 
'</span><span class="line-302 line"><span class="lineno">302 </span><span class="cm">     * bound and no overflow occurs. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-303 line"><span class="lineno">303 </span>    <span class="n">over</span> <span class="o">=</span> <span class="n">div_by_2_25</span><span class="p">(</span><span class="n">output</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]);</span><sup class="after"></sup>\n' + 
'</span><span class="line-304 line"><span class="lineno">304 </span>    <span class="n">output</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-=</span> <span class="n">over</span> <span class="o">&lt;&lt;</span> <span class="mi">25</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-305 line"><span class="lineno">305 </span>    <span class="n">output</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">+=</span> <span class="n">over</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-306 line"><span class="lineno">306 </span>  <span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-307 line"><span class="lineno">307 </span>  <span class="cm">/* Now |output[10]| &lt; 281*2^29 and all other coefficients are reduced. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-308 line"><span class="lineno">308 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-309 line"><span class="lineno">309 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-310 line"><span class="lineno">310 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-311 line"><span class="lineno">311 </span><sup class="after"></sup>\n' + 
'</span><span class="line-312 line"><span class="lineno">312 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-313 line"><span class="lineno">313 </span><sup class="after"></sup>\n' + 
'</span><span class="line-314 line"><span class="lineno">314 </span>  <span class="cm">/* Now output[1..9] are reduced, and |output[0]| &lt; 2^26 + 19*281*2^29</span><sup class="after"></sup>\n' + 
'</span><span class="line-315 line"><span class="lineno">315 </span><span class="cm">   * So |over| will be no more than 2^16. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-316 line"><span class="lineno">316 </span>  <span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-317 line"><span class="lineno">317 </span>    <span class="kt">int64_t</span> <span class="n">over</span> <span class="o">=</span> <span class="n">div_by_2_26</span><span class="p">(</span><span class="n">output</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><sup class="after"></sup>\n' + 
'</span><span class="line-318 line"><span class="lineno">318 </span>    <span class="n">output</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-=</span> <span class="n">over</span> <span class="o">&lt;&lt;</span> <span class="mi">26</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-319 line"><span class="lineno">319 </span>    <span class="n">output</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="n">over</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-320 line"><span class="lineno">320 </span>  <span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-321 line"><span class="lineno">321 </span><sup class="after"></sup>\n' + 
'</span><span class="line-322 line"><span class="lineno">322 </span>  <span class="cm">/* Now output[0,2..9] are reduced, and |output[1]| &lt; 2^25 + 2^16 &lt; 2^26. The</span><sup class="after"></sup>\n' + 
'</span><span class="line-323 line"><span class="lineno">323 </span><span class="cm">   * bound on |output[1]| is sufficient to meet our needs. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-324 line"><span class="lineno">324 </span><span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-325 line"><span class="lineno">325 </span><sup class="after"></sup>\n' + 
'</span><span class="line-326 line"><span class="lineno">326 </span><span class="cm">/* A helpful wrapper around fproduct: output = in * in2.</span><sup class="after"></sup>\n' + 
'</span><span class="line-327 line"><span class="lineno">327 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-328 line"><span class="lineno">328 </span><span class="cm"> * On entry: |in[i]| &lt; 2^27 and |in2[i]| &lt; 2^27.</span><sup class="after"></sup>\n' + 
'</span><span class="line-329 line"><span class="lineno">329 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-330 line"><span class="lineno">330 </span><span class="cm"> * output must be distinct to both inputs. The output is reduced degree</span><sup class="after"></sup>\n' + 
'</span><span class="line-331 line"><span class="lineno">331 </span><span class="cm"> * (indeed, one need only provide storage for 10 limbs) and |output[i]| &lt; 2^26. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-332 line"><span class="lineno">332 </span><span class="k">static</span> <span class="kt">void</span><sup class="after"></sup>\n' + 
'</span><span class="line-333 line"><span class="lineno">333 </span><span class="nf">fmul</span><span class="p">(</span><span class="kt">int64_t</span> <span class="o">*</span><span class="n">output</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int64_t</span> <span class="o">*</span><span class="n">in</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int64_t</span> <span class="o">*</span><span class="n">in2</span><span class="p">)</span><sup class="after"></sup>\n' + 
'</span><span class="line-334 line"><span class="lineno">334 </span><span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-335 line"><span class="lineno">335 </span>  <span class="kt">int64_t</span> <span class="n">t</span><span class="p">[</span><span class="mi">19</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-336 line"><span class="lineno">336 </span>  <span class="n">fproduct</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">in</span><span class="p">,</span> <span class="n">in2</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-337 line"><span class="lineno">337 </span>  <span class="cm">/* |t[i]| &lt; 14*2^54 */</span><sup class="after"></sup>\n' + 
'</span><span class="line-338 line"><span class="lineno">338 </span>  <span class="n">freduce_degree</span><span class="p">(</span><span class="n">t</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-339 line"><span class="lineno">339 </span>  <span class="n">freduce_coefficients</span><span class="p">(</span><span class="n">t</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-340 line"><span class="lineno">340 </span>  <span class="cm">/* |t[i]| &lt; 2^26 */</span><sup class="after"></sup>\n' + 
'</span><span class="line-341 line"><span class="lineno">341 </span>  <span class="n">memcpy</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int64_t</span><span class="p">)</span> <span class="o">*</span> <span class="mi">10</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-342 line"><span class="lineno">342 </span><span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-343 line"><span class="lineno">343 </span><sup class="after"></sup>\n' + 
'</span><span class="line-344 line"><span class="lineno">344 </span><span class="cm">/* Square a number: output = in**2</span><sup class="after"></sup>\n' + 
'</span><span class="line-345 line"><span class="lineno">345 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-346 line"><span class="lineno">346 </span><span class="cm"> * output must be distinct from the input. The inputs are reduced coefficient</span><sup class="after"></sup>\n' + 
'</span><span class="line-347 line"><span class="lineno">347 </span><span class="cm"> * form, the output is not.</span><sup class="after"></sup>\n' + 
'</span><span class="line-348 line"><span class="lineno">348 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-349 line"><span class="lineno">349 </span><span class="cm"> * output[x] &lt;= 14 * the largest product of the input limbs. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-350 line"><span class="lineno">350 </span><span class="k">static</span> <span class="kt">void</span><sup class="after"></sup>\n' + 
'</span><span class="line-351 line"><span class="lineno">351 </span><span class="nf">fsquare_inner</span><span class="p">(</span><span class="kt">int64_t</span> <span class="o">*</span><span class="n">output</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int64_t</span> <span class="o">*</span><span class="n">in</span><span class="p">)</span><sup class="after"></sup>\n' + 
'</span><span class="line-352 line"><span class="lineno">352 </span><span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-353 line"><span class="lineno">353 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span>       <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><sup class="after"></sup>\n' + 
'</span><span class="line-354 line"><span class="lineno">354 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span>  <span class="mi">2</span> <span class="o">*</span>  <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span><sup class="after"></sup>\n' + 
'</span><span class="line-355 line"><span class="lineno">355 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span>  <span class="mi">2</span> <span class="o">*</span> <span class="p">(((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-356 line"><span class="lineno">356 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">2</span><span class="p">]));</span><sup class="after"></sup>\n' + 
'</span><span class="line-357 line"><span class="lineno">357 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span>  <span class="mi">2</span> <span class="o">*</span> <span class="p">(((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-358 line"><span class="lineno">358 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">3</span><span class="p">]));</span><sup class="after"></sup>\n' + 
'</span><span class="line-359 line"><span class="lineno">359 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span>       <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-360 line"><span class="lineno">360 </span>               <span class="mi">4</span> <span class="o">*</span>  <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-361 line"><span class="lineno">361 </span>               <span class="mi">2</span> <span class="o">*</span>  <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">4</span><span class="p">]);</span><sup class="after"></sup>\n' + 
'</span><span class="line-362 line"><span class="lineno">362 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span>  <span class="mi">2</span> <span class="o">*</span> <span class="p">(((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-363 line"><span class="lineno">363 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-364 line"><span class="lineno">364 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">5</span><span class="p">]));</span><sup class="after"></sup>\n' + 
'</span><span class="line-365 line"><span class="lineno">365 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span>  <span class="mi">2</span> <span class="o">*</span> <span class="p">(((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">3</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-366 line"><span class="lineno">366 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-367 line"><span class="lineno">367 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-368 line"><span class="lineno">368 </span>               <span class="mi">2</span> <span class="o">*</span>  <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">5</span><span class="p">]));</span><sup class="after"></sup>\n' + 
'</span><span class="line-369 line"><span class="lineno">369 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span>  <span class="mi">2</span> <span class="o">*</span> <span class="p">(((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">3</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-370 line"><span class="lineno">370 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-371 line"><span class="lineno">371 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-372 line"><span class="lineno">372 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">7</span><span class="p">]));</span><sup class="after"></sup>\n' + 
'</span><span class="line-373 line"><span class="lineno">373 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="o">=</span>       <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">4</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-374 line"><span class="lineno">374 </span>               <span class="mi">2</span> <span class="o">*</span> <span class="p">(((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-375 line"><span class="lineno">375 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">8</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-376 line"><span class="lineno">376 </span>               <span class="mi">2</span> <span class="o">*</span> <span class="p">(((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-377 line"><span class="lineno">377 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">3</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">5</span><span class="p">])));</span><sup class="after"></sup>\n' + 
'</span><span class="line-378 line"><span class="lineno">378 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">=</span>  <span class="mi">2</span> <span class="o">*</span> <span class="p">(((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">4</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-379 line"><span class="lineno">379 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">3</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-380 line"><span class="lineno">380 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-381 line"><span class="lineno">381 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">8</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-382 line"><span class="lineno">382 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">9</span><span class="p">]));</span><sup class="after"></sup>\n' + 
'</span><span class="line-383 line"><span class="lineno">383 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">5</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-384 line"><span class="lineno">384 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">4</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-385 line"><span class="lineno">385 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">8</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-386 line"><span class="lineno">386 </span>               <span class="mi">2</span> <span class="o">*</span> <span class="p">(((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">3</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-387 line"><span class="lineno">387 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">9</span><span class="p">])));</span><sup class="after"></sup>\n' + 
'</span><span class="line-388 line"><span class="lineno">388 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">5</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-389 line"><span class="lineno">389 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">4</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-390 line"><span class="lineno">390 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">3</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">8</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-391 line"><span class="lineno">391 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">9</span><span class="p">]));</span><sup class="after"></sup>\n' + 
'</span><span class="line-392 line"><span class="lineno">392 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span> <span class="o">=</span>      <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">6</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-393 line"><span class="lineno">393 </span>               <span class="mi">2</span> <span class="o">*</span> <span class="p">(((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">4</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">8</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-394 line"><span class="lineno">394 </span>               <span class="mi">2</span> <span class="o">*</span> <span class="p">(((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">5</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-395 line"><span class="lineno">395 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">3</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">9</span><span class="p">])));</span><sup class="after"></sup>\n' + 
'</span><span class="line-396 line"><span class="lineno">396 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">6</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-397 line"><span class="lineno">397 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">5</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">8</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-398 line"><span class="lineno">398 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">4</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">9</span><span class="p">]));</span><sup class="after"></sup>\n' + 
'</span><span class="line-399 line"><span class="lineno">399 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">7</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-400 line"><span class="lineno">400 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">6</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">8</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-401 line"><span class="lineno">401 </span>               <span class="mi">2</span> <span class="o">*</span>  <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">5</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">9</span><span class="p">]));</span><sup class="after"></sup>\n' + 
'</span><span class="line-402 line"><span class="lineno">402 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">7</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">8</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-403 line"><span class="lineno">403 </span>                    <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">6</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">9</span><span class="p">]));</span><sup class="after"></sup>\n' + 
'</span><span class="line-404 line"><span class="lineno">404 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span>      <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">8</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">8</span><span class="p">])</span> <span class="o">+</span><sup class="after"></sup>\n' + 
'</span><span class="line-405 line"><span class="lineno">405 </span>               <span class="mi">4</span> <span class="o">*</span>  <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">7</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">9</span><span class="p">]);</span><sup class="after"></sup>\n' + 
'</span><span class="line-406 line"><span class="lineno">406 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">17</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span>  <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">8</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">9</span><span class="p">]);</span><sup class="after"></sup>\n' + 
'</span><span class="line-407 line"><span class="lineno">407 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">18</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span>  <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">9</span><span class="p">]))</span> <span class="o">*</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="mi">9</span><span class="p">]);</span><sup class="after"></sup>\n' + 
'</span><span class="line-408 line"><span class="lineno">408 </span><span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-409 line"><span class="lineno">409 </span><sup class="after"></sup>\n' + 
'</span><span class="line-410 line"><span class="lineno">410 </span><span class="cm">/* fsquare sets output = in^2.</span><sup class="after"></sup>\n' + 
'</span><span class="line-411 line"><span class="lineno">411 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-412 line"><span class="lineno">412 </span><span class="cm"> * On entry: The |in| argument is in reduced coefficients form and |in[i]| &lt;</span><sup class="after"></sup>\n' + 
'</span><span class="line-413 line"><span class="lineno">413 </span><span class="cm"> * 2^27.</span><sup class="after"></sup>\n' + 
'</span><span class="line-414 line"><span class="lineno">414 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-415 line"><span class="lineno">415 </span><span class="cm"> * On exit: The |output| argument is in reduced coefficients form (indeed, one</span><sup class="after"></sup>\n' + 
'</span><span class="line-416 line"><span class="lineno">416 </span><span class="cm"> * need only provide storage for 10 limbs) and |out[i]| &lt; 2^26. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-417 line"><span class="lineno">417 </span><span class="k">static</span> <span class="kt">void</span><sup class="after"></sup>\n' + 
'</span><span class="line-418 line"><span class="lineno">418 </span><span class="nf">fsquare</span><span class="p">(</span><span class="kt">int64_t</span> <span class="o">*</span><span class="n">output</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int64_t</span> <span class="o">*</span><span class="n">in</span><span class="p">)</span><sup class="after"></sup>\n' + 
'</span><span class="line-419 line"><span class="lineno">419 </span><span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-420 line"><span class="lineno">420 </span>  <span class="kt">int64_t</span> <span class="n">t</span><span class="p">[</span><span class="mi">19</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-421 line"><span class="lineno">421 </span>  <span class="n">fsquare_inner</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">in</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-422 line"><span class="lineno">422 </span>  <span class="cm">/* |t[i]| &lt; 14*2^54 because the largest product of two limbs will be &lt;</span><sup class="after"></sup>\n' + 
'</span><span class="line-423 line"><span class="lineno">423 </span><span class="cm">   * 2^(27+27) and fsquare_inner adds together, at most, 14 of those</span><sup class="after"></sup>\n' + 
'</span><span class="line-424 line"><span class="lineno">424 </span><span class="cm">   * products. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-425 line"><span class="lineno">425 </span>  <span class="n">freduce_degree</span><span class="p">(</span><span class="n">t</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-426 line"><span class="lineno">426 </span>  <span class="n">freduce_coefficients</span><span class="p">(</span><span class="n">t</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-427 line"><span class="lineno">427 </span>  <span class="cm">/* |t[i]| &lt; 2^26 */</span><sup class="after"></sup>\n' + 
'</span><span class="line-428 line"><span class="lineno">428 </span>  <span class="n">memcpy</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int64_t</span><span class="p">)</span> <span class="o">*</span> <span class="mi">10</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-429 line"><span class="lineno">429 </span><span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-430 line"><span class="lineno">430 </span><sup class="after"></sup>\n' + 
'</span><span class="line-431 line"><span class="lineno">431 </span><span class="cm">/* Take a little-endian, 32-byte number and expand it into polynomial form */</span><sup class="after"></sup>\n' + 
'</span><span class="line-432 line"><span class="lineno">432 </span><span class="k">static</span> <span class="kt">void</span><sup class="after"></sup>\n' + 
'</span><span class="line-433 line"><span class="lineno">433 </span><span class="nf">fexpand</span><span class="p">(</span><span class="kt">int64_t</span> <span class="o">*</span><span class="n">output</span><span class="p">,</span> <span class="k">const</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">input</span><span class="p">)</span><sup class="after"></sup>\n' + 
'</span><span class="line-434 line"><span class="lineno">434 </span><span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-435 line"><span class="lineno">435 </span><span class="cp">#define F(n,start,shift,mask) \\</span><sup class="after"></sup>\n' + 
'</span><span class="line-436 line"><span class="lineno">436 </span><span class="cp">  output[n] = ((((int64_t) input[start + 0]) | \\</span><sup class="after"></sup>\n' + 
'</span><span class="line-437 line"><span class="lineno">437 </span><span class="cp">                ((int64_t) input[start + 1]) &lt;&lt; 8 | \\</span><sup class="after"></sup>\n' + 
'</span><span class="line-438 line"><span class="lineno">438 </span><span class="cp">                ((int64_t) input[start + 2]) &lt;&lt; 16 | \\</span><sup class="after"></sup>\n' + 
'</span><span class="line-439 line"><span class="lineno">439 </span><span class="cp">                ((int64_t) input[start + 3]) &lt;&lt; 24) &gt;&gt; shift) &amp; mask;</span><sup class="after"></sup>\n' + 
'</span><span class="line-440 line"><span class="lineno">440 </span>  <span class="n">F</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0x3ffffff</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-441 line"><span class="lineno">441 </span>  <span class="n">F</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mh">0x1ffffff</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-442 line"><span class="lineno">442 </span>  <span class="n">F</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mh">0x3ffffff</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-443 line"><span class="lineno">443 </span>  <span class="n">F</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mh">0x1ffffff</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-444 line"><span class="lineno">444 </span>  <span class="n">F</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mh">0x3ffffff</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-445 line"><span class="lineno">445 </span>  <span class="n">F</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0x1ffffff</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-446 line"><span class="lineno">446 </span>  <span class="n">F</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mh">0x3ffffff</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-447 line"><span class="lineno">447 </span>  <span class="n">F</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mh">0x1ffffff</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-448 line"><span class="lineno">448 </span>  <span class="n">F</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mh">0x3ffffff</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-449 line"><span class="lineno">449 </span>  <span class="n">F</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mh">0x1ffffff</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-450 line"><span class="lineno">450 </span><span class="cp">#undef F</span><sup class="after"></sup>\n' + 
'</span><span class="line-451 line"><span class="lineno">451 </span><span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-452 line"><span class="lineno">452 </span><sup class="after"></sup>\n' + 
'</span><span class="line-453 line"><span class="lineno">453 </span><span class="cp">#if (-32 &gt;&gt; 1) != -16</span><sup class="after"></sup>\n' + 
'</span><span class="line-454 line"><span class="lineno">454 </span><span class="cp">#error &quot;This code only works when &gt;&gt; does sign-extension on negative numbers&quot;</span><sup class="after"></sup>\n' + 
'</span><span class="line-455 line"><span class="lineno">455 </span><span class="cp">#endif</span><sup class="after"></sup>\n' + 
'</span><span class="line-456 line"><span class="lineno">456 </span><sup class="after"></sup>\n' + 
'</span><span class="line-457 line"><span class="lineno">457 </span><span class="cm">/* s32_eq returns 0xffffffff iff a == b and zero otherwise. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-458 line"><span class="lineno">458 </span><span class="k">static</span> <span class="kt">int32_t</span><sup class="after"></sup>\n' + 
'</span><span class="line-459 line"><span class="lineno">459 </span><span class="nf">s32_eq</span><span class="p">(</span><span class="kt">int32_t</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int32_t</span> <span class="n">b</span><span class="p">)</span><sup class="after"></sup>\n' + 
'</span><span class="line-460 line"><span class="lineno">460 </span><span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-461 line"><span class="lineno">461 </span>  <span class="n">a</span> <span class="o">=</span> <span class="o">~</span><span class="p">(</span><span class="n">a</span> <span class="o">^</span> <span class="n">b</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-462 line"><span class="lineno">462 </span>  <span class="n">a</span> <span class="o">&amp;=</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-463 line"><span class="lineno">463 </span>  <span class="n">a</span> <span class="o">&amp;=</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-464 line"><span class="lineno">464 </span>  <span class="n">a</span> <span class="o">&amp;=</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-465 line"><span class="lineno">465 </span>  <span class="n">a</span> <span class="o">&amp;=</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-466 line"><span class="lineno">466 </span>  <span class="n">a</span> <span class="o">&amp;=</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-467 line"><span class="lineno">467 </span>  <span class="k">return</span> <span class="n">a</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-468 line"><span class="lineno">468 </span><span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-469 line"><span class="lineno">469 </span><sup class="after"></sup>\n' + 
'</span><span class="line-470 line"><span class="lineno">470 </span><span class="cm">/* s32_gte returns 0xffffffff if a &gt;= b and zero otherwise, where a and b are</span><sup class="after"></sup>\n' + 
'</span><span class="line-471 line"><span class="lineno">471 </span><span class="cm"> * both non-negative. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-472 line"><span class="lineno">472 </span><span class="k">static</span> <span class="kt">int32_t</span><sup class="after"></sup>\n' + 
'</span><span class="line-473 line"><span class="lineno">473 </span><span class="nf">s32_gte</span><span class="p">(</span><span class="kt">int32_t</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int32_t</span> <span class="n">b</span><span class="p">)</span><sup class="after"></sup>\n' + 
'</span><span class="line-474 line"><span class="lineno">474 </span><span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-475 line"><span class="lineno">475 </span>  <span class="n">a</span> <span class="o">-=</span> <span class="n">b</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-476 line"><span class="lineno">476 </span>  <span class="cm">/* a &gt;= 0 iff a &gt;= b. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-477 line"><span class="lineno">477 </span>  <span class="k">return</span> <span class="o">~</span><span class="p">(</span><span class="n">a</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-478 line"><span class="lineno">478 </span><span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-479 line"><span class="lineno">479 </span><sup class="after"></sup>\n' + 
'</span><span class="line-480 line"><span class="lineno">480 </span><span class="cm">/* Take a fully reduced polynomial form number and contract it into a</span><sup class="after"></sup>\n' + 
'</span><span class="line-481 line"><span class="lineno">481 </span><span class="cm"> * little-endian, 32-byte array.</span><sup class="after"></sup>\n' + 
'</span><span class="line-482 line"><span class="lineno">482 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-483 line"><span class="lineno">483 </span><span class="cm"> * On entry: |input_limbs[i]| &lt; 2^26 */</span><sup class="after"></sup>\n' + 
'</span><span class="line-484 line"><span class="lineno">484 </span><span class="k">static</span> <span class="kt">void</span><sup class="after"></sup>\n' + 
'</span><span class="line-485 line"><span class="lineno">485 </span><span class="nf">fcontract</span><span class="p">(</span><span class="kt">uint8_t</span> <span class="o">*</span><span class="n">output</span><span class="p">,</span> <span class="kt">int64_t</span> <span class="o">*</span><span class="n">input_limbs</span><span class="p">)</span><sup class="after"></sup>\n' + 
'</span><span class="line-486 line"><span class="lineno">486 </span><span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-487 line"><span class="lineno">487 </span>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-488 line"><span class="lineno">488 </span>  <span class="kt">int</span> <span class="n">j</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-489 line"><span class="lineno">489 </span>  <span class="kt">int32_t</span> <span class="n">input</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-490 line"><span class="lineno">490 </span>  <span class="kt">int32_t</span> <span class="n">mask</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-491 line"><span class="lineno">491 </span><sup class="after"></sup>\n' + 
'</span><span class="line-492 line"><span class="lineno">492 </span>  <span class="cm">/* |input_limbs[i]| &lt; 2^26, so it&#39;s valid to convert to an int32_t. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-493 line"><span class="lineno">493 </span>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-494 line"><span class="lineno">494 </span>    <span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">input_limbs</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-495 line"><span class="lineno">495 </span>  <span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-496 line"><span class="lineno">496 </span><sup class="after"></sup>\n' + 
'</span><span class="line-497 line"><span class="lineno">497 </span>  <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-498 line"><span class="lineno">498 </span>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-499 line"><span class="lineno">499 </span>      <span class="k">if</span> <span class="p">((</span><span class="n">i</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-500 line"><span class="lineno">500 </span>        <span class="cm">/* This calculation is a time-invariant way to make input[i]</span><sup class="after"></sup>\n' + 
'</span><span class="line-501 line"><span class="lineno">501 </span><span class="cm">         * non-negative by borrowing from the next-larger limb. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-502 line"><span class="lineno">502 </span>        <span class="k">const</span> <span class="kt">int32_t</span> <span class="n">mask</span> <span class="o">=</span> <span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-503 line"><span class="lineno">503 </span>        <span class="k">const</span> <span class="kt">int32_t</span> <span class="n">carry</span> <span class="o">=</span> <span class="o">-</span><span class="p">((</span><span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;</span> <span class="n">mask</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">25</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-504 line"><span class="lineno">504 </span>        <span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="p">(</span><span class="n">carry</span> <span class="o">&lt;&lt;</span> <span class="mi">25</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-505 line"><span class="lineno">505 </span>        <span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">carry</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-506 line"><span class="lineno">506 </span>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-507 line"><span class="lineno">507 </span>        <span class="k">const</span> <span class="kt">int32_t</span> <span class="n">mask</span> <span class="o">=</span> <span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-508 line"><span class="lineno">508 </span>        <span class="k">const</span> <span class="kt">int32_t</span> <span class="n">carry</span> <span class="o">=</span> <span class="o">-</span><span class="p">((</span><span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;</span> <span class="n">mask</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">26</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-509 line"><span class="lineno">509 </span>        <span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="p">(</span><span class="n">carry</span> <span class="o">&lt;&lt;</span> <span class="mi">26</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-510 line"><span class="lineno">510 </span>        <span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">carry</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-511 line"><span class="lineno">511 </span>      <span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-512 line"><span class="lineno">512 </span>    <span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-513 line"><span class="lineno">513 </span><sup class="after"></sup>\n' + 
'</span><span class="line-514 line"><span class="lineno">514 </span>    <span class="cm">/* There&#39;s no greater limb for input[9] to borrow from, but we can multiply</span><sup class="after"></sup>\n' + 
'</span><span class="line-515 line"><span class="lineno">515 </span><span class="cm">     * by 19 and borrow from input[0], which is valid mod 2^255-19. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-516 line"><span class="lineno">516 </span>    <span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-517 line"><span class="lineno">517 </span>      <span class="k">const</span> <span class="kt">int32_t</span> <span class="n">mask</span> <span class="o">=</span> <span class="n">input</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-518 line"><span class="lineno">518 </span>      <span class="k">const</span> <span class="kt">int32_t</span> <span class="n">carry</span> <span class="o">=</span> <span class="o">-</span><span class="p">((</span><span class="n">input</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">&amp;</span> <span class="n">mask</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">25</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-519 line"><span class="lineno">519 </span>      <span class="n">input</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">=</span> <span class="n">input</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">+</span> <span class="p">(</span><span class="n">carry</span> <span class="o">&lt;&lt;</span> <span class="mi">25</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-520 line"><span class="lineno">520 </span>      <span class="n">input</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">input</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="p">(</span><span class="n">carry</span> <span class="o">*</span> <span class="mi">19</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-521 line"><span class="lineno">521 </span>    <span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-522 line"><span class="lineno">522 </span><sup class="after"></sup>\n' + 
'</span><span class="line-523 line"><span class="lineno">523 </span>    <span class="cm">/* After the first iteration, input[1..9] are non-negative and fit within</span><sup class="after"></sup>\n' + 
'</span><span class="line-524 line"><span class="lineno">524 </span><span class="cm">     * 25 or 26 bits, depending on position. However, input[0] may be</span><sup class="after"></sup>\n' + 
'</span><span class="line-525 line"><span class="lineno">525 </span><span class="cm">     * negative. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-526 line"><span class="lineno">526 </span>  <span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-527 line"><span class="lineno">527 </span><sup class="after"></sup>\n' + 
'</span><span class="line-528 line"><span class="lineno">528 </span>  <span class="cm">/* The first borrow-propagation pass above ended with every limb</span><sup class="after"></sup>\n' + 
'</span><span class="line-529 line"><span class="lineno">529 </span><span class="cm">     except (possibly) input[0] non-negative.</span><sup class="after"></sup>\n' + 
'</span><span class="line-530 line"><span class="lineno">530 </span><sup class="after"></sup>\n' + 
'</span><span class="line-531 line"><span class="lineno">531 </span><span class="cm">     If input[0] was negative after the first pass, then it was because of a</span><sup class="after"></sup>\n' + 
'</span><span class="line-532 line"><span class="lineno">532 </span><span class="cm">     carry from input[9]. On entry, input[9] &lt; 2^26 so the carry was, at most,</span><sup class="after"></sup>\n' + 
'</span><span class="line-533 line"><span class="lineno">533 </span><span class="cm">     one, since (2**26-1) &gt;&gt; 25 = 1. Thus input[0] &gt;= -19.</span><sup class="after"></sup>\n' + 
'</span><span class="line-534 line"><span class="lineno">534 </span><sup class="after"></sup>\n' + 
'</span><span class="line-535 line"><span class="lineno">535 </span><span class="cm">     In the second pass, each limb is decreased by at most one. Thus the second</span><sup class="after"></sup>\n' + 
'</span><span class="line-536 line"><span class="lineno">536 </span><span class="cm">     borrow-propagation pass could only have wrapped around to decrease</span><sup class="after"></sup>\n' + 
'</span><span class="line-537 line"><span class="lineno">537 </span><span class="cm">     input[0] again if the first pass left input[0] negative *and* input[1]</span><sup class="after"></sup>\n' + 
'</span><span class="line-538 line"><span class="lineno">538 </span><span class="cm">     through input[9] were all zero.  In that case, input[1] is now 2^25 - 1,</span><sup class="after"></sup>\n' + 
'</span><span class="line-539 line"><span class="lineno">539 </span><span class="cm">     and this last borrow-propagation step will leave input[1] non-negative. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-540 line"><span class="lineno">540 </span>  <span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-541 line"><span class="lineno">541 </span>    <span class="k">const</span> <span class="kt">int32_t</span> <span class="n">mask</span> <span class="o">=</span> <span class="n">input</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-542 line"><span class="lineno">542 </span>    <span class="k">const</span> <span class="kt">int32_t</span> <span class="n">carry</span> <span class="o">=</span> <span class="o">-</span><span class="p">((</span><span class="n">input</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="n">mask</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">26</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-543 line"><span class="lineno">543 </span>    <span class="n">input</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">input</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="p">(</span><span class="n">carry</span> <span class="o">&lt;&lt;</span> <span class="mi">26</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-544 line"><span class="lineno">544 </span>    <span class="n">input</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">input</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">carry</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-545 line"><span class="lineno">545 </span>  <span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-546 line"><span class="lineno">546 </span><sup class="after"></sup>\n' + 
'</span><span class="line-547 line"><span class="lineno">547 </span>  <span class="cm">/* All input[i] are now non-negative. However, there might be values between</span><sup class="after"></sup>\n' + 
'</span><span class="line-548 line"><span class="lineno">548 </span><span class="cm">   * 2^25 and 2^26 in a limb which is, nominally, 25 bits wide. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-549 line"><span class="lineno">549 </span>  <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-550 line"><span class="lineno">550 </span>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-551 line"><span class="lineno">551 </span>      <span class="k">if</span> <span class="p">((</span><span class="n">i</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-552 line"><span class="lineno">552 </span>        <span class="k">const</span> <span class="kt">int32_t</span> <span class="n">carry</span> <span class="o">=</span> <span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">25</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-553 line"><span class="lineno">553 </span>        <span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;=</span> <span class="mh">0x1ffffff</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-554 line"><span class="lineno">554 </span>        <span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="n">carry</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-555 line"><span class="lineno">555 </span>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-556 line"><span class="lineno">556 </span>        <span class="k">const</span> <span class="kt">int32_t</span> <span class="n">carry</span> <span class="o">=</span> <span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">26</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-557 line"><span class="lineno">557 </span>        <span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;=</span> <span class="mh">0x3ffffff</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-558 line"><span class="lineno">558 </span>        <span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="n">carry</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-559 line"><span class="lineno">559 </span>      <span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-560 line"><span class="lineno">560 </span>    <span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-561 line"><span class="lineno">561 </span><sup class="after"></sup>\n' + 
'</span><span class="line-562 line"><span class="lineno">562 </span>    <span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-563 line"><span class="lineno">563 </span>      <span class="k">const</span> <span class="kt">int32_t</span> <span class="n">carry</span> <span class="o">=</span> <span class="n">input</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">25</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-564 line"><span class="lineno">564 </span>      <span class="n">input</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">&amp;=</span> <span class="mh">0x1ffffff</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-565 line"><span class="lineno">565 </span>      <span class="n">input</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">19</span><span class="o">*</span><span class="n">carry</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-566 line"><span class="lineno">566 </span>    <span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-567 line"><span class="lineno">567 </span>  <span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-568 line"><span class="lineno">568 </span><sup class="after"></sup>\n' + 
'</span><span class="line-569 line"><span class="lineno">569 </span>  <span class="cm">/* If the first carry-chain pass, just above, ended up with a carry from</span><sup class="after"></sup>\n' + 
'</span><span class="line-570 line"><span class="lineno">570 </span><span class="cm">   * input[9], and that caused input[0] to be out-of-bounds, then input[0] was</span><sup class="after"></sup>\n' + 
'</span><span class="line-571 line"><span class="lineno">571 </span><span class="cm">   * &lt; 2^26 + 2*19, because the carry was, at most, two.</span><sup class="after"></sup>\n' + 
'</span><span class="line-572 line"><span class="lineno">572 </span><span class="cm">   *</span><sup class="after"></sup>\n' + 
'</span><span class="line-573 line"><span class="lineno">573 </span><span class="cm">   * If the second pass carried from input[9] again then input[0] is &lt; 2*19 and</span><sup class="after"></sup>\n' + 
'</span><span class="line-574 line"><span class="lineno">574 </span><span class="cm">   * the input[9] -&gt; input[0] carry didn&#39;t push input[0] out of bounds. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-575 line"><span class="lineno">575 </span><sup class="after"></sup>\n' + 
'</span><span class="line-576 line"><span class="lineno">576 </span>  <span class="cm">/* It still remains the case that input might be between 2^255-19 and 2^255.</span><sup class="after"></sup>\n' + 
'</span><span class="line-577 line"><span class="lineno">577 </span><span class="cm">   * In this case, input[1..9] must take their maximum value and input[0] must</span><sup class="after"></sup>\n' + 
'</span><span class="line-578 line"><span class="lineno">578 </span><span class="cm">   * be &gt;= (2^255-19) &amp; 0x3ffffff, which is 0x3ffffed. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-579 line"><span class="lineno">579 </span>  <span class="n">mask</span> <span class="o">=</span> <span class="n">s32_gte</span><span class="p">(</span><span class="n">input</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mh">0x3ffffed</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-580 line"><span class="lineno">580 </span>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-581 line"><span class="lineno">581 </span>    <span class="k">if</span> <span class="p">((</span><span class="n">i</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-582 line"><span class="lineno">582 </span>      <span class="n">mask</span> <span class="o">&amp;=</span> <span class="n">s32_eq</span><span class="p">(</span><span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="mh">0x1ffffff</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-583 line"><span class="lineno">583 </span>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-584 line"><span class="lineno">584 </span>      <span class="n">mask</span> <span class="o">&amp;=</span> <span class="n">s32_eq</span><span class="p">(</span><span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="mh">0x3ffffff</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-585 line"><span class="lineno">585 </span>    <span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-586 line"><span class="lineno">586 </span>  <span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-587 line"><span class="lineno">587 </span><sup class="after"></sup>\n' + 
'</span><span class="line-588 line"><span class="lineno">588 </span>  <span class="cm">/* mask is either 0xffffffff (if input &gt;= 2^255-19) and zero otherwise. Thus</span><sup class="after"></sup>\n' + 
'</span><span class="line-589 line"><span class="lineno">589 </span><span class="cm">   * this conditionally subtracts 2^255-19. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-590 line"><span class="lineno">590 </span>  <span class="n">input</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-=</span> <span class="n">mask</span> <span class="o">&amp;</span> <span class="mh">0x3ffffed</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-591 line"><span class="lineno">591 </span><sup class="after"></sup>\n' + 
'</span><span class="line-592 line"><span class="lineno">592 </span>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-593 line"><span class="lineno">593 </span>    <span class="k">if</span> <span class="p">((</span><span class="n">i</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-594 line"><span class="lineno">594 </span>      <span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-=</span> <span class="n">mask</span> <span class="o">&amp;</span> <span class="mh">0x1ffffff</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-595 line"><span class="lineno">595 </span>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-596 line"><span class="lineno">596 </span>      <span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-=</span> <span class="n">mask</span> <span class="o">&amp;</span> <span class="mh">0x3ffffff</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-597 line"><span class="lineno">597 </span>    <span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-598 line"><span class="lineno">598 </span>  <span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-599 line"><span class="lineno">599 </span><sup class="after"></sup>\n' + 
'</span><span class="line-600 line"><span class="lineno">600 </span>  <span class="n">input</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;&lt;=</span> <span class="mi">2</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-601 line"><span class="lineno">601 </span>  <span class="n">input</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">&lt;&lt;=</span> <span class="mi">3</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-602 line"><span class="lineno">602 </span>  <span class="n">input</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">&lt;&lt;=</span> <span class="mi">5</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-603 line"><span class="lineno">603 </span>  <span class="n">input</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">&lt;&lt;=</span> <span class="mi">6</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-604 line"><span class="lineno">604 </span>  <span class="n">input</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">&lt;&lt;=</span> <span class="mi">1</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-605 line"><span class="lineno">605 </span>  <span class="n">input</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">&lt;&lt;=</span> <span class="mi">3</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-606 line"><span class="lineno">606 </span>  <span class="n">input</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="o">&lt;&lt;=</span> <span class="mi">4</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-607 line"><span class="lineno">607 </span>  <span class="n">input</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">&lt;&lt;=</span> <span class="mi">6</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-608 line"><span class="lineno">608 </span><span class="cp">#define F(i, s) \\</span><sup class="after"></sup>\n' + 
'</span><span class="line-609 line"><span class="lineno">609 </span><span class="cp">  output[s+0] |=  input[i] &amp; 0xff; \\</span><sup class="after"></sup>\n' + 
'</span><span class="line-610 line"><span class="lineno">610 </span><span class="cp">  output[s+1]  = (input[i] &gt;&gt; 8) &amp; 0xff; \\</span><sup class="after"></sup>\n' + 
'</span><span class="line-611 line"><span class="lineno">611 </span><span class="cp">  output[s+2]  = (input[i] &gt;&gt; 16) &amp; 0xff; \\</span><sup class="after"></sup>\n' + 
'</span><span class="line-612 line"><span class="lineno">612 </span><span class="cp">  output[s+3]  = (input[i] &gt;&gt; 24) &amp; 0xff;</span><sup class="after"></sup>\n' + 
'</span><span class="line-613 line"><span class="lineno">613 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-614 line"><span class="lineno">614 </span>  <span class="n">output</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-615 line"><span class="lineno">615 </span>  <span class="n">F</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-616 line"><span class="lineno">616 </span>  <span class="n">F</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-617 line"><span class="lineno">617 </span>  <span class="n">F</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">6</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-618 line"><span class="lineno">618 </span>  <span class="n">F</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">9</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-619 line"><span class="lineno">619 </span>  <span class="n">F</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">12</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-620 line"><span class="lineno">620 </span>  <span class="n">F</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">16</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-621 line"><span class="lineno">621 </span>  <span class="n">F</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">19</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-622 line"><span class="lineno">622 </span>  <span class="n">F</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">22</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-623 line"><span class="lineno">623 </span>  <span class="n">F</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">25</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-624 line"><span class="lineno">624 </span>  <span class="n">F</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">28</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-625 line"><span class="lineno">625 </span><span class="cp">#undef F</span><sup class="after"></sup>\n' + 
'</span><span class="line-626 line"><span class="lineno">626 </span><span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-627 line"><span class="lineno">627 </span><sup class="after"></sup>\n' + 
'</span><span class="line-628 line"><span class="lineno">628 </span><span class="cm">/* Input: Q, Q&#39;, Q-Q&#39;</span><sup class="after"></sup>\n' + 
'</span><span class="line-629 line"><span class="lineno">629 </span><span class="cm"> * Output: 2Q, Q+Q&#39;</span><sup class="after"></sup>\n' + 
'</span><span class="line-630 line"><span class="lineno">630 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-631 line"><span class="lineno">631 </span><span class="cm"> *   x2 z3: long form</span><sup class="after"></sup>\n' + 
'</span><span class="line-632 line"><span class="lineno">632 </span><span class="cm"> *   x3 z3: long form</span><sup class="after"></sup>\n' + 
'</span><span class="line-633 line"><span class="lineno">633 </span><span class="cm"> *   x z: short form, destroyed</span><sup class="after"></sup>\n' + 
'</span><span class="line-634 line"><span class="lineno">634 </span><span class="cm"> *   xprime zprime: short form, destroyed</span><sup class="after"></sup>\n' + 
'</span><span class="line-635 line"><span class="lineno">635 </span><span class="cm"> *   qmqp: short form, preserved</span><sup class="after"></sup>\n' + 
'</span><span class="line-636 line"><span class="lineno">636 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-637 line"><span class="lineno">637 </span><span class="cm"> * On entry and exit, the absolute value of the limbs of all inputs and outputs</span><sup class="after"></sup>\n' + 
'</span><span class="line-638 line"><span class="lineno">638 </span><span class="cm"> * are &lt; 2^26. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-639 line"><span class="lineno">639 </span><span class="k">static</span> <span class="kt">void</span><sup class="after"></sup>\n' + 
'</span><span class="line-640 line"><span class="lineno">640 </span><span class="nf">fmonty</span><span class="p">(</span><span class="kt">int64_t</span> <span class="o">*</span><span class="n">x2</span><span class="p">,</span> <span class="kt">int64_t</span> <span class="o">*</span><span class="n">z2</span><span class="p">,</span>  <span class="cm">/* output 2Q */</span><sup class="after"></sup>\n' + 
'</span><span class="line-641 line"><span class="lineno">641 </span>       <span class="kt">int64_t</span> <span class="o">*</span><span class="n">x3</span><span class="p">,</span> <span class="kt">int64_t</span> <span class="o">*</span><span class="n">z3</span><span class="p">,</span>  <span class="cm">/* output Q + Q&#39; */</span><sup class="after"></sup>\n' + 
'</span><span class="line-642 line"><span class="lineno">642 </span>       <span class="kt">int64_t</span> <span class="o">*</span><span class="n">x</span><span class="p">,</span> <span class="kt">int64_t</span> <span class="o">*</span><span class="n">z</span><span class="p">,</span>    <span class="cm">/* input Q */</span><sup class="after"></sup>\n' + 
'</span><span class="line-643 line"><span class="lineno">643 </span>       <span class="kt">int64_t</span> <span class="o">*</span><span class="n">xprime</span><span class="p">,</span> <span class="kt">int64_t</span> <span class="o">*</span><span class="n">zprime</span><span class="p">,</span>  <span class="cm">/* input Q&#39; */</span><sup class="after"></sup>\n' + 
'</span><span class="line-644 line"><span class="lineno">644 </span>       <span class="k">const</span> <span class="kt">int64_t</span> <span class="o">*</span><span class="n">qmqp</span> <span class="cm">/* input Q - Q&#39; */</span><span class="p">)</span><sup class="after"></sup>\n' + 
'</span><span class="line-645 line"><span class="lineno">645 </span><span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-646 line"><span class="lineno">646 </span>  <span class="kt">int64_t</span> <span class="n">origx</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span> <span class="n">origxprime</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span> <span class="n">zzz</span><span class="p">[</span><span class="mi">19</span><span class="p">],</span> <span class="n">xx</span><span class="p">[</span><span class="mi">19</span><span class="p">],</span> <span class="n">zz</span><span class="p">[</span><span class="mi">19</span><span class="p">],</span> <span class="n">xxprime</span><span class="p">[</span><span class="mi">19</span><span class="p">],</span><sup class="after"></sup>\n' + 
'</span><span class="line-647 line"><span class="lineno">647 </span>        <span class="n">zzprime</span><span class="p">[</span><span class="mi">19</span><span class="p">],</span> <span class="n">zzzprime</span><span class="p">[</span><span class="mi">19</span><span class="p">],</span> <span class="n">xxxprime</span><span class="p">[</span><span class="mi">19</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-648 line"><span class="lineno">648 </span><sup class="after"></sup>\n' + 
'</span><span class="line-649 line"><span class="lineno">649 </span>  <span class="n">memcpy</span><span class="p">(</span><span class="n">origx</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="mi">10</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int64_t</span><span class="p">));</span><sup class="after"></sup>\n' + 
'</span><span class="line-650 line"><span class="lineno">650 </span>  <span class="n">fsum</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">z</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-651 line"><span class="lineno">651 </span>  <span class="cm">/* |x[i]| &lt; 2^27 */</span><sup class="after"></sup>\n' + 
'</span><span class="line-652 line"><span class="lineno">652 </span>  <span class="n">fdifference</span><span class="p">(</span><span class="n">z</span><span class="p">,</span> <span class="n">origx</span><span class="p">);</span>  <span class="cm">/* does x - z */</span><sup class="after"></sup>\n' + 
'</span><span class="line-653 line"><span class="lineno">653 </span>  <span class="cm">/* |z[i]| &lt; 2^27 */</span><sup class="after"></sup>\n' + 
'</span><span class="line-654 line"><span class="lineno">654 </span><sup class="after"></sup>\n' + 
'</span><span class="line-655 line"><span class="lineno">655 </span>  <span class="n">memcpy</span><span class="p">(</span><span class="n">origxprime</span><span class="p">,</span> <span class="n">xprime</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int64_t</span><span class="p">)</span> <span class="o">*</span> <span class="mi">10</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-656 line"><span class="lineno">656 </span>  <span class="n">fsum</span><span class="p">(</span><span class="n">xprime</span><span class="p">,</span> <span class="n">zprime</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-657 line"><span class="lineno">657 </span>  <span class="cm">/* |xprime[i]| &lt; 2^27 */</span><sup class="after"></sup>\n' + 
'</span><span class="line-658 line"><span class="lineno">658 </span>  <span class="n">fdifference</span><span class="p">(</span><span class="n">zprime</span><span class="p">,</span> <span class="n">origxprime</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-659 line"><span class="lineno">659 </span>  <span class="cm">/* |zprime[i]| &lt; 2^27 */</span><sup class="after"></sup>\n' + 
'</span><span class="line-660 line"><span class="lineno">660 </span>  <span class="n">fproduct</span><span class="p">(</span><span class="n">xxprime</span><span class="p">,</span> <span class="n">xprime</span><span class="p">,</span> <span class="n">z</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-661 line"><span class="lineno">661 </span>  <span class="cm">/* |xxprime[i]| &lt; 14*2^54: the largest product of two limbs will be &lt;</span><sup class="after"></sup>\n' + 
'</span><span class="line-662 line"><span class="lineno">662 </span><span class="cm">   * 2^(27+27) and fproduct adds together, at most, 14 of those products.</span><sup class="after"></sup>\n' + 
'</span><span class="line-663 line"><span class="lineno">663 </span><span class="cm">   * (Approximating that to 2^58 doesn&#39;t work out.) */</span><sup class="after"></sup>\n' + 
'</span><span class="line-664 line"><span class="lineno">664 </span>  <span class="n">fproduct</span><span class="p">(</span><span class="n">zzprime</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">zprime</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-665 line"><span class="lineno">665 </span>  <span class="cm">/* |zzprime[i]| &lt; 14*2^54 */</span><sup class="after"></sup>\n' + 
'</span><span class="line-666 line"><span class="lineno">666 </span>  <span class="n">freduce_degree</span><span class="p">(</span><span class="n">xxprime</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-667 line"><span class="lineno">667 </span>  <span class="n">freduce_coefficients</span><span class="p">(</span><span class="n">xxprime</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-668 line"><span class="lineno">668 </span>  <span class="cm">/* |xxprime[i]| &lt; 2^26 */</span><sup class="after"></sup>\n' + 
'</span><span class="line-669 line"><span class="lineno">669 </span>  <span class="n">freduce_degree</span><span class="p">(</span><span class="n">zzprime</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-670 line"><span class="lineno">670 </span>  <span class="n">freduce_coefficients</span><span class="p">(</span><span class="n">zzprime</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-671 line"><span class="lineno">671 </span>  <span class="cm">/* |zzprime[i]| &lt; 2^26 */</span><sup class="after"></sup>\n' + 
'</span><span class="line-672 line"><span class="lineno">672 </span>  <span class="n">memcpy</span><span class="p">(</span><span class="n">origxprime</span><span class="p">,</span> <span class="n">xxprime</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int64_t</span><span class="p">)</span> <span class="o">*</span> <span class="mi">10</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-673 line"><span class="lineno">673 </span>  <span class="n">fsum</span><span class="p">(</span><span class="n">xxprime</span><span class="p">,</span> <span class="n">zzprime</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-674 line"><span class="lineno">674 </span>  <span class="cm">/* |xxprime[i]| &lt; 2^27 */</span><sup class="after"></sup>\n' + 
'</span><span class="line-675 line"><span class="lineno">675 </span>  <span class="n">fdifference</span><span class="p">(</span><span class="n">zzprime</span><span class="p">,</span> <span class="n">origxprime</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-676 line"><span class="lineno">676 </span>  <span class="cm">/* |zzprime[i]| &lt; 2^27 */</span><sup class="after"></sup>\n' + 
'</span><span class="line-677 line"><span class="lineno">677 </span>  <span class="n">fsquare</span><span class="p">(</span><span class="n">xxxprime</span><span class="p">,</span> <span class="n">xxprime</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-678 line"><span class="lineno">678 </span>  <span class="cm">/* |xxxprime[i]| &lt; 2^26 */</span><sup class="after"></sup>\n' + 
'</span><span class="line-679 line"><span class="lineno">679 </span>  <span class="n">fsquare</span><span class="p">(</span><span class="n">zzzprime</span><span class="p">,</span> <span class="n">zzprime</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-680 line"><span class="lineno">680 </span>  <span class="cm">/* |zzzprime[i]| &lt; 2^26 */</span><sup class="after"></sup>\n' + 
'</span><span class="line-681 line"><span class="lineno">681 </span>  <span class="n">fproduct</span><span class="p">(</span><span class="n">zzprime</span><span class="p">,</span> <span class="n">zzzprime</span><span class="p">,</span> <span class="n">qmqp</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-682 line"><span class="lineno">682 </span>  <span class="cm">/* |zzprime[i]| &lt; 14*2^52 */</span><sup class="after"></sup>\n' + 
'</span><span class="line-683 line"><span class="lineno">683 </span>  <span class="n">freduce_degree</span><span class="p">(</span><span class="n">zzprime</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-684 line"><span class="lineno">684 </span>  <span class="n">freduce_coefficients</span><span class="p">(</span><span class="n">zzprime</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-685 line"><span class="lineno">685 </span>  <span class="cm">/* |zzprime[i]| &lt; 2^26 */</span><sup class="after"></sup>\n' + 
'</span><span class="line-686 line"><span class="lineno">686 </span>  <span class="n">memcpy</span><span class="p">(</span><span class="n">x3</span><span class="p">,</span> <span class="n">xxxprime</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int64_t</span><span class="p">)</span> <span class="o">*</span> <span class="mi">10</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-687 line"><span class="lineno">687 </span>  <span class="n">memcpy</span><span class="p">(</span><span class="n">z3</span><span class="p">,</span> <span class="n">zzprime</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int64_t</span><span class="p">)</span> <span class="o">*</span> <span class="mi">10</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-688 line"><span class="lineno">688 </span><sup class="after"></sup>\n' + 
'</span><span class="line-689 line"><span class="lineno">689 </span>  <span class="n">fsquare</span><span class="p">(</span><span class="n">xx</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-690 line"><span class="lineno">690 </span>  <span class="cm">/* |xx[i]| &lt; 2^26 */</span><sup class="after"></sup>\n' + 
'</span><span class="line-691 line"><span class="lineno">691 </span>  <span class="n">fsquare</span><span class="p">(</span><span class="n">zz</span><span class="p">,</span> <span class="n">z</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-692 line"><span class="lineno">692 </span>  <span class="cm">/* |zz[i]| &lt; 2^26 */</span><sup class="after"></sup>\n' + 
'</span><span class="line-693 line"><span class="lineno">693 </span>  <span class="n">fproduct</span><span class="p">(</span><span class="n">x2</span><span class="p">,</span> <span class="n">xx</span><span class="p">,</span> <span class="n">zz</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-694 line"><span class="lineno">694 </span>  <span class="cm">/* |x2[i]| &lt; 14*2^52 */</span><sup class="after"></sup>\n' + 
'</span><span class="line-695 line"><span class="lineno">695 </span>  <span class="n">freduce_degree</span><span class="p">(</span><span class="n">x2</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-696 line"><span class="lineno">696 </span>  <span class="n">freduce_coefficients</span><span class="p">(</span><span class="n">x2</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-697 line"><span class="lineno">697 </span>  <span class="cm">/* |x2[i]| &lt; 2^26 */</span><sup class="after"></sup>\n' + 
'</span><span class="line-698 line"><span class="lineno">698 </span>  <span class="n">fdifference</span><span class="p">(</span><span class="n">zz</span><span class="p">,</span> <span class="n">xx</span><span class="p">);</span>  <span class="cm">/* does zz = xx - zz */</span><sup class="after"></sup>\n' + 
'</span><span class="line-699 line"><span class="lineno">699 </span>  <span class="cm">/* |zz[i]| &lt; 2^27 */</span><sup class="after"></sup>\n' + 
'</span><span class="line-700 line"><span class="lineno">700 </span>  <span class="n">memset</span><span class="p">(</span><span class="n">zzz</span> <span class="o">+</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int64_t</span><span class="p">)</span> <span class="o">*</span> <span class="mi">9</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-701 line"><span class="lineno">701 </span>  <span class="n">fscalar_product</span><span class="p">(</span><span class="n">zzz</span><span class="p">,</span> <span class="n">zz</span><span class="p">,</span> <span class="mi">121665</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-702 line"><span class="lineno">702 </span>  <span class="cm">/* |zzz[i]| &lt; 2^(27+17) */</span><sup class="after"></sup>\n' + 
'</span><span class="line-703 line"><span class="lineno">703 </span>  <span class="cm">/* No need to call freduce_degree here:</span><sup class="after"></sup>\n' + 
'</span><span class="line-704 line"><span class="lineno">704 </span><span class="cm">     fscalar_product doesn&#39;t increase the degree of its input. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-705 line"><span class="lineno">705 </span>  <span class="n">freduce_coefficients</span><span class="p">(</span><span class="n">zzz</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-706 line"><span class="lineno">706 </span>  <span class="cm">/* |zzz[i]| &lt; 2^26 */</span><sup class="after"></sup>\n' + 
'</span><span class="line-707 line"><span class="lineno">707 </span>  <span class="n">fsum</span><span class="p">(</span><span class="n">zzz</span><span class="p">,</span> <span class="n">xx</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-708 line"><span class="lineno">708 </span>  <span class="cm">/* |zzz[i]| &lt; 2^27 */</span><sup class="after"></sup>\n' + 
'</span><span class="line-709 line"><span class="lineno">709 </span>  <span class="n">fproduct</span><span class="p">(</span><span class="n">z2</span><span class="p">,</span> <span class="n">zz</span><span class="p">,</span> <span class="n">zzz</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-710 line"><span class="lineno">710 </span>  <span class="cm">/* |z2[i]| &lt; 14*2^(26+27) */</span><sup class="after"></sup>\n' + 
'</span><span class="line-711 line"><span class="lineno">711 </span>  <span class="n">freduce_degree</span><span class="p">(</span><span class="n">z2</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-712 line"><span class="lineno">712 </span>  <span class="n">freduce_coefficients</span><span class="p">(</span><span class="n">z2</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-713 line"><span class="lineno">713 </span>  <span class="cm">/* |z2|i| &lt; 2^26 */</span><sup class="after"></sup>\n' + 
'</span><span class="line-714 line"><span class="lineno">714 </span><span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-715 line"><span class="lineno">715 </span><sup class="after"></sup>\n' + 
'</span><span class="line-716 line"><span class="lineno">716 </span><span class="cm">/* Conditionally swap two reduced-form limb arrays if &#39;iswap&#39; is 1, but leave</span><sup class="after"></sup>\n' + 
'</span><span class="line-717 line"><span class="lineno">717 </span><span class="cm"> * them unchanged if &#39;iswap&#39; is 0.  Runs in data-invariant time to avoid</span><sup class="after"></sup>\n' + 
'</span><span class="line-718 line"><span class="lineno">718 </span><span class="cm"> * side-channel attacks.</span><sup class="after"></sup>\n' + 
'</span><span class="line-719 line"><span class="lineno">719 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-720 line"><span class="lineno">720 </span><span class="cm"> * NOTE that this function requires that &#39;iswap&#39; be 1 or 0; other values give</span><sup class="after"></sup>\n' + 
'</span><span class="line-721 line"><span class="lineno">721 </span><span class="cm"> * wrong results.  Also, the two limb arrays must be in reduced-coefficient,</span><sup class="after"></sup>\n' + 
'</span><span class="line-722 line"><span class="lineno">722 </span><span class="cm"> * reduced-degree form: the values in a[10..19] or b[10..19] aren&#39;t swapped,</span><sup class="after"></sup>\n' + 
'</span><span class="line-723 line"><span class="lineno">723 </span><span class="cm"> * and all all values in a[0..9],b[0..9] must have magnitude less than</span><sup class="after"></sup>\n' + 
'</span><span class="line-724 line"><span class="lineno">724 </span><span class="cm"> * INT32_MAX. */</span><sup class="after"></sup>\n' + 
'</span><span class="line-725 line"><span class="lineno">725 </span><span class="k">static</span> <span class="kt">void</span><sup class="after"></sup>\n' + 
'</span><span class="line-726 line"><span class="lineno">726 </span><span class="nf">swap_conditional</span><span class="p">(</span><span class="kt">int64_t</span> <span class="n">a</span><span class="p">[</span><span class="mi">19</span><span class="p">],</span> <span class="kt">int64_t</span> <span class="n">b</span><span class="p">[</span><span class="mi">19</span><span class="p">],</span> <span class="kt">int64_t</span> <span class="n">iswap</span><span class="p">)</span><sup class="after"></sup>\n' + 
'</span><span class="line-727 line"><span class="lineno">727 </span><span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-728 line"><span class="lineno">728 </span>  <span class="kt">unsigned</span> <span class="n">i</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-729 line"><span class="lineno">729 </span>  <span class="k">const</span> <span class="kt">int32_t</span> <span class="n">swap</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int32_t</span><span class="p">)</span> <span class="o">-</span><span class="n">iswap</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-730 line"><span class="lineno">730 </span><sup class="after"></sup>\n' + 
'</span><span class="line-731 line"><span class="lineno">731 </span>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-732 line"><span class="lineno">732 </span>    <span class="k">const</span> <span class="kt">int32_t</span> <span class="n">x</span> <span class="o">=</span> <span class="n">swap</span> <span class="o">&amp;</span> <span class="p">(</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">^</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-733 line"><span class="lineno">733 </span>    <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">^</span> <span class="n">x</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-734 line"><span class="lineno">734 </span>    <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="kt">int32_t</span><span class="p">)</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">^</span> <span class="n">x</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-735 line"><span class="lineno">735 </span>  <span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-736 line"><span class="lineno">736 </span><span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-737 line"><span class="lineno">737 </span><sup class="after"></sup>\n' + 
'</span><span class="line-738 line"><span class="lineno">738 </span><span class="cm">/* Calculates nQ where Q is the x-coordinate of a point on the curve</span><sup class="after"></sup>\n' + 
'</span><span class="line-739 line"><span class="lineno">739 </span><span class="cm"> *</span><sup class="after"></sup>\n' + 
'</span><span class="line-740 line"><span class="lineno">740 </span><span class="cm"> *   resultx/resultz: the x coordinate of the resulting curve point (short form)</span><sup class="after"></sup>\n' + 
'</span><span class="line-741 line"><span class="lineno">741 </span><span class="cm"> *   n: a little endian, 32-byte number</span><sup class="after"></sup>\n' + 
'</span><span class="line-742 line"><span class="lineno">742 </span><span class="cm"> *   q: a point of the curve (short form) */</span><sup class="after"></sup>\n' + 
'</span><span class="line-743 line"><span class="lineno">743 </span><span class="k">static</span> <span class="kt">void</span><sup class="after"></sup>\n' + 
'</span><span class="line-744 line"><span class="lineno">744 </span><span class="nf">cmult</span><span class="p">(</span><span class="kt">int64_t</span> <span class="o">*</span><span class="n">resultx</span><span class="p">,</span> <span class="kt">int64_t</span> <span class="o">*</span><span class="n">resultz</span><span class="p">,</span> <span class="k">const</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">n</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int64_t</span> <span class="o">*</span><span class="n">q</span><span class="p">)</span><sup class="after"></sup>\n' + 
'</span><span class="line-745 line"><span class="lineno">745 </span><span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-746 line"><span class="lineno">746 </span>  <span class="kt">int64_t</span> <span class="n">a</span><span class="p">[</span><span class="mi">19</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">},</span> <span class="n">b</span><span class="p">[</span><span class="mi">19</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">},</span> <span class="n">c</span><span class="p">[</span><span class="mi">19</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">},</span> <span class="n">d</span><span class="p">[</span><span class="mi">19</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span><sup class="after"></sup>\n' + 
'</span><span class="line-747 line"><span class="lineno">747 </span>  <span class="kt">int64_t</span> <span class="o">*</span><span class="n">nqpqx</span> <span class="o">=</span> <span class="n">a</span><span class="p">,</span> <span class="o">*</span><span class="n">nqpqz</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="o">*</span><span class="n">nqx</span> <span class="o">=</span> <span class="n">c</span><span class="p">,</span> <span class="o">*</span><span class="n">nqz</span> <span class="o">=</span> <span class="n">d</span><span class="p">,</span> <span class="o">*</span><span class="n">t</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-748 line"><span class="lineno">748 </span>  <span class="kt">int64_t</span> <span class="n">e</span><span class="p">[</span><span class="mi">19</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">},</span> <span class="n">f</span><span class="p">[</span><span class="mi">19</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">},</span> <span class="n">g</span><span class="p">[</span><span class="mi">19</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">},</span> <span class="n">h</span><span class="p">[</span><span class="mi">19</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">};</span><sup class="after"></sup>\n' + 
'</span><span class="line-749 line"><span class="lineno">749 </span>  <span class="kt">int64_t</span> <span class="o">*</span><span class="n">nqpqx2</span> <span class="o">=</span> <span class="n">e</span><span class="p">,</span> <span class="o">*</span><span class="n">nqpqz2</span> <span class="o">=</span> <span class="n">f</span><span class="p">,</span> <span class="o">*</span><span class="n">nqx2</span> <span class="o">=</span> <span class="n">g</span><span class="p">,</span> <span class="o">*</span><span class="n">nqz2</span> <span class="o">=</span> <span class="n">h</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-750 line"><span class="lineno">750 </span><sup class="after"></sup>\n' + 
'</span><span class="line-751 line"><span class="lineno">751 </span>  <span class="kt">unsigned</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-752 line"><span class="lineno">752 </span><sup class="after"></sup>\n' + 
'</span><span class="line-753 line"><span class="lineno">753 </span>  <span class="n">memcpy</span><span class="p">(</span><span class="n">nqpqx</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int64_t</span><span class="p">)</span> <span class="o">*</span> <span class="mi">10</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-754 line"><span class="lineno">754 </span><sup class="after"></sup>\n' + 
'</span><span class="line-755 line"><span class="lineno">755 </span>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">32</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-756 line"><span class="lineno">756 </span>    <span class="kt">uint8_t</span> <span class="n">byte</span> <span class="o">=</span> <span class="n">n</span><span class="p">[</span><span class="mi">31</span> <span class="o">-</span> <span class="n">i</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-757 line"><span class="lineno">757 </span>    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-758 line"><span class="lineno">758 </span>      <span class="k">const</span> <span class="kt">int64_t</span> <span class="n">bit</span> <span class="o">=</span> <span class="n">byte</span> <span class="o">&gt;&gt;</span> <span class="mi">7</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-759 line"><span class="lineno">759 </span><sup class="after"></sup>\n' + 
'</span><span class="line-760 line"><span class="lineno">760 </span>      <span class="n">swap_conditional</span><span class="p">(</span><span class="n">nqx</span><span class="p">,</span> <span class="n">nqpqx</span><span class="p">,</span> <span class="n">bit</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-761 line"><span class="lineno">761 </span>      <span class="n">swap_conditional</span><span class="p">(</span><span class="n">nqz</span><span class="p">,</span> <span class="n">nqpqz</span><span class="p">,</span> <span class="n">bit</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-762 line"><span class="lineno">762 </span>      <span class="n">fmonty</span><span class="p">(</span><span class="n">nqx2</span><span class="p">,</span> <span class="n">nqz2</span><span class="p">,</span><sup class="after"></sup>\n' + 
'</span><span class="line-763 line"><span class="lineno">763 </span>             <span class="n">nqpqx2</span><span class="p">,</span> <span class="n">nqpqz2</span><span class="p">,</span><sup class="after"></sup>\n' + 
'</span><span class="line-764 line"><span class="lineno">764 </span>             <span class="n">nqx</span><span class="p">,</span> <span class="n">nqz</span><span class="p">,</span><sup class="after"></sup>\n' + 
'</span><span class="line-765 line"><span class="lineno">765 </span>             <span class="n">nqpqx</span><span class="p">,</span> <span class="n">nqpqz</span><span class="p">,</span><sup class="after"></sup>\n' + 
'</span><span class="line-766 line"><span class="lineno">766 </span>             <span class="n">q</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-767 line"><span class="lineno">767 </span>      <span class="n">swap_conditional</span><span class="p">(</span><span class="n">nqx2</span><span class="p">,</span> <span class="n">nqpqx2</span><span class="p">,</span> <span class="n">bit</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-768 line"><span class="lineno">768 </span>      <span class="n">swap_conditional</span><span class="p">(</span><span class="n">nqz2</span><span class="p">,</span> <span class="n">nqpqz2</span><span class="p">,</span> <span class="n">bit</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-769 line"><span class="lineno">769 </span><sup class="after"></sup>\n' + 
'</span><span class="line-770 line"><span class="lineno">770 </span>      <span class="n">t</span> <span class="o">=</span> <span class="n">nqx</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-771 line"><span class="lineno">771 </span>      <span class="n">nqx</span> <span class="o">=</span> <span class="n">nqx2</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-772 line"><span class="lineno">772 </span>      <span class="n">nqx2</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-773 line"><span class="lineno">773 </span>      <span class="n">t</span> <span class="o">=</span> <span class="n">nqz</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-774 line"><span class="lineno">774 </span>      <span class="n">nqz</span> <span class="o">=</span> <span class="n">nqz2</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-775 line"><span class="lineno">775 </span>      <span class="n">nqz2</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-776 line"><span class="lineno">776 </span>      <span class="n">t</span> <span class="o">=</span> <span class="n">nqpqx</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-777 line"><span class="lineno">777 </span>      <span class="n">nqpqx</span> <span class="o">=</span> <span class="n">nqpqx2</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-778 line"><span class="lineno">778 </span>      <span class="n">nqpqx2</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-779 line"><span class="lineno">779 </span>      <span class="n">t</span> <span class="o">=</span> <span class="n">nqpqz</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-780 line"><span class="lineno">780 </span>      <span class="n">nqpqz</span> <span class="o">=</span> <span class="n">nqpqz2</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-781 line"><span class="lineno">781 </span>      <span class="n">nqpqz2</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-782 line"><span class="lineno">782 </span><sup class="after"></sup>\n' + 
'</span><span class="line-783 line"><span class="lineno">783 </span>      <span class="n">byte</span> <span class="o">&lt;&lt;=</span> <span class="mi">1</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-784 line"><span class="lineno">784 </span>    <span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-785 line"><span class="lineno">785 </span>  <span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-786 line"><span class="lineno">786 </span><sup class="after"></sup>\n' + 
'</span><span class="line-787 line"><span class="lineno">787 </span>  <span class="n">memcpy</span><span class="p">(</span><span class="n">resultx</span><span class="p">,</span> <span class="n">nqx</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int64_t</span><span class="p">)</span> <span class="o">*</span> <span class="mi">10</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-788 line"><span class="lineno">788 </span>  <span class="n">memcpy</span><span class="p">(</span><span class="n">resultz</span><span class="p">,</span> <span class="n">nqz</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int64_t</span><span class="p">)</span> <span class="o">*</span> <span class="mi">10</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-789 line"><span class="lineno">789 </span><span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-790 line"><span class="lineno">790 </span><sup class="after"></sup>\n' + 
'</span><span class="line-791 line"><span class="lineno">791 </span><span class="k">static</span> <span class="kt">void</span><sup class="after"></sup>\n' + 
'</span><span class="line-792 line"><span class="lineno">792 </span><span class="nf">crecip</span><span class="p">(</span><span class="kt">int64_t</span> <span class="o">*</span><span class="n">out</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int64_t</span> <span class="o">*</span><span class="n">z</span><span class="p">)</span><sup class="after"></sup>\n' + 
'</span><span class="line-793 line"><span class="lineno">793 </span><span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-794 line"><span class="lineno">794 </span>  <span class="kt">int64_t</span> <span class="n">z2</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-795 line"><span class="lineno">795 </span>  <span class="kt">int64_t</span> <span class="n">z9</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-796 line"><span class="lineno">796 </span>  <span class="kt">int64_t</span> <span class="n">z11</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-797 line"><span class="lineno">797 </span>  <span class="kt">int64_t</span> <span class="n">z2_5_0</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-798 line"><span class="lineno">798 </span>  <span class="kt">int64_t</span> <span class="n">z2_10_0</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-799 line"><span class="lineno">799 </span>  <span class="kt">int64_t</span> <span class="n">z2_20_0</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-800 line"><span class="lineno">800 </span>  <span class="kt">int64_t</span> <span class="n">z2_50_0</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-801 line"><span class="lineno">801 </span>  <span class="kt">int64_t</span> <span class="n">z2_100_0</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-802 line"><span class="lineno">802 </span>  <span class="kt">int64_t</span> <span class="n">t0</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-803 line"><span class="lineno">803 </span>  <span class="kt">int64_t</span> <span class="n">t1</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-804 line"><span class="lineno">804 </span>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-805 line"><span class="lineno">805 </span><sup class="after"></sup>\n' + 
'</span><span class="line-806 line"><span class="lineno">806 </span>  <span class="cm">/* 2 */</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">z2</span><span class="p">,</span><span class="n">z</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-807 line"><span class="lineno">807 </span>  <span class="cm">/* 4 */</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">z2</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-808 line"><span class="lineno">808 </span>  <span class="cm">/* 8 */</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-809 line"><span class="lineno">809 </span>  <span class="cm">/* 9 */</span> <span class="n">fmul</span><span class="p">(</span><span class="n">z9</span><span class="p">,</span><span class="n">t0</span><span class="p">,</span><span class="n">z</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-810 line"><span class="lineno">810 </span>  <span class="cm">/* 11 */</span> <span class="n">fmul</span><span class="p">(</span><span class="n">z11</span><span class="p">,</span><span class="n">z9</span><span class="p">,</span><span class="n">z2</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-811 line"><span class="lineno">811 </span>  <span class="cm">/* 22 */</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">z11</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-812 line"><span class="lineno">812 </span>  <span class="cm">/* 2^5 - 2^0 = 31 */</span> <span class="n">fmul</span><span class="p">(</span><span class="n">z2_5_0</span><span class="p">,</span><span class="n">t0</span><span class="p">,</span><span class="n">z9</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-813 line"><span class="lineno">813 </span><sup class="after"></sup>\n' + 
'</span><span class="line-814 line"><span class="lineno">814 </span>  <span class="cm">/* 2^6 - 2^1 */</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">z2_5_0</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-815 line"><span class="lineno">815 </span>  <span class="cm">/* 2^7 - 2^2 */</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-816 line"><span class="lineno">816 </span>  <span class="cm">/* 2^8 - 2^3 */</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-817 line"><span class="lineno">817 </span>  <span class="cm">/* 2^9 - 2^4 */</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-818 line"><span class="lineno">818 </span>  <span class="cm">/* 2^10 - 2^5 */</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-819 line"><span class="lineno">819 </span>  <span class="cm">/* 2^10 - 2^0 */</span> <span class="n">fmul</span><span class="p">(</span><span class="n">z2_10_0</span><span class="p">,</span><span class="n">t0</span><span class="p">,</span><span class="n">z2_5_0</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-820 line"><span class="lineno">820 </span><sup class="after"></sup>\n' + 
'</span><span class="line-821 line"><span class="lineno">821 </span>  <span class="cm">/* 2^11 - 2^1 */</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">z2_10_0</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-822 line"><span class="lineno">822 </span>  <span class="cm">/* 2^12 - 2^2 */</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-823 line"><span class="lineno">823 </span>  <span class="cm">/* 2^20 - 2^10 */</span> <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span><span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span> <span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-824 line"><span class="lineno">824 </span>  <span class="cm">/* 2^20 - 2^0 */</span> <span class="n">fmul</span><span class="p">(</span><span class="n">z2_20_0</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">z2_10_0</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-825 line"><span class="lineno">825 </span><sup class="after"></sup>\n' + 
'</span><span class="line-826 line"><span class="lineno">826 </span>  <span class="cm">/* 2^21 - 2^1 */</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">z2_20_0</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-827 line"><span class="lineno">827 </span>  <span class="cm">/* 2^22 - 2^2 */</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-828 line"><span class="lineno">828 </span>  <span class="cm">/* 2^40 - 2^20 */</span> <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">20</span><span class="p">;</span><span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span> <span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-829 line"><span class="lineno">829 </span>  <span class="cm">/* 2^40 - 2^0 */</span> <span class="n">fmul</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">z2_20_0</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-830 line"><span class="lineno">830 </span><sup class="after"></sup>\n' + 
'</span><span class="line-831 line"><span class="lineno">831 </span>  <span class="cm">/* 2^41 - 2^1 */</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-832 line"><span class="lineno">832 </span>  <span class="cm">/* 2^42 - 2^2 */</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-833 line"><span class="lineno">833 </span>  <span class="cm">/* 2^50 - 2^10 */</span> <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span><span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span> <span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-834 line"><span class="lineno">834 </span>  <span class="cm">/* 2^50 - 2^0 */</span> <span class="n">fmul</span><span class="p">(</span><span class="n">z2_50_0</span><span class="p">,</span><span class="n">t0</span><span class="p">,</span><span class="n">z2_10_0</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-835 line"><span class="lineno">835 </span><sup class="after"></sup>\n' + 
'</span><span class="line-836 line"><span class="lineno">836 </span>  <span class="cm">/* 2^51 - 2^1 */</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">z2_50_0</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-837 line"><span class="lineno">837 </span>  <span class="cm">/* 2^52 - 2^2 */</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-838 line"><span class="lineno">838 </span>  <span class="cm">/* 2^100 - 2^50 */</span> <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">50</span><span class="p">;</span><span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span> <span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-839 line"><span class="lineno">839 </span>  <span class="cm">/* 2^100 - 2^0 */</span> <span class="n">fmul</span><span class="p">(</span><span class="n">z2_100_0</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">z2_50_0</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-840 line"><span class="lineno">840 </span><sup class="after"></sup>\n' + 
'</span><span class="line-841 line"><span class="lineno">841 </span>  <span class="cm">/* 2^101 - 2^1 */</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">z2_100_0</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-842 line"><span class="lineno">842 </span>  <span class="cm">/* 2^102 - 2^2 */</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-843 line"><span class="lineno">843 </span>  <span class="cm">/* 2^200 - 2^100 */</span> <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">;</span><span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span> <span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-844 line"><span class="lineno">844 </span>  <span class="cm">/* 2^200 - 2^0 */</span> <span class="n">fmul</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">,</span><span class="n">z2_100_0</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-845 line"><span class="lineno">845 </span><sup class="after"></sup>\n' + 
'</span><span class="line-846 line"><span class="lineno">846 </span>  <span class="cm">/* 2^201 - 2^1 */</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-847 line"><span class="lineno">847 </span>  <span class="cm">/* 2^202 - 2^2 */</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-848 line"><span class="lineno">848 </span>  <span class="cm">/* 2^250 - 2^50 */</span> <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">50</span><span class="p">;</span><span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span> <span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-849 line"><span class="lineno">849 </span>  <span class="cm">/* 2^250 - 2^0 */</span> <span class="n">fmul</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">z2_50_0</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-850 line"><span class="lineno">850 </span><sup class="after"></sup>\n' + 
'</span><span class="line-851 line"><span class="lineno">851 </span>  <span class="cm">/* 2^251 - 2^1 */</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-852 line"><span class="lineno">852 </span>  <span class="cm">/* 2^252 - 2^2 */</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-853 line"><span class="lineno">853 </span>  <span class="cm">/* 2^253 - 2^3 */</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-854 line"><span class="lineno">854 </span>  <span class="cm">/* 2^254 - 2^4 */</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-855 line"><span class="lineno">855 </span>  <span class="cm">/* 2^255 - 2^5 */</span> <span class="n">fsquare</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t0</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-856 line"><span class="lineno">856 </span>  <span class="cm">/* 2^255 - 21 */</span> <span class="n">fmul</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">z11</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-857 line"><span class="lineno">857 </span><span class="p">}</span><sup class="after"></sup>\n' + 
'</span><span class="line-858 line"><span class="lineno">858 </span><sup class="after"></sup>\n' + 
'</span><span class="line-859 line"><span class="lineno">859 </span><span class="kt">int</span><sup class="after"></sup>\n' + 
'</span><span class="line-860 line"><span class="lineno">860 </span><span class="nf">curve25519_donna</span><span class="p">(</span><sup class="after"></sup>\n' + 
'</span><span class="line-861 line"><span class="lineno">861 </span>        <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">mypublic</span><span class="p">,</span><sup class="after"></sup>\n' + 
'</span><span class="line-862 line"><span class="lineno">862 </span>        <span class="k">const</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">secret</span><span class="p">,</span><sup class="after"></sup>\n' + 
'</span><span class="line-863 line"><span class="lineno">863 </span>        <span class="k">const</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">basepoint</span><span class="p">)</span><sup class="after"></sup>\n' + 
'</span><span class="line-864 line"><span class="lineno">864 </span><span class="p">{</span><sup class="after"></sup>\n' + 
'</span><span class="line-865 line"><span class="lineno">865 </span>  <span class="kt">int64_t</span> <span class="n">bp</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span> <span class="n">x</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span> <span class="n">z</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span> <span class="n">zmone</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-866 line"><span class="lineno">866 </span>  <span class="kt">uint8_t</span> <span class="n">e</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-867 line"><span class="lineno">867 </span>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-868 line"><span class="lineno">868 </span><sup class="after"></sup>\n' + 
'</span><span class="line-869 line"><span class="lineno">869 </span>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">32</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="n">e</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">secret</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><sup class="after"></sup>\n' + 
'</span><span class="line-870 line"><span class="lineno">870 </span>  <span class="n">e</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;=</span> <span class="mi">248</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-871 line"><span class="lineno">871 </span>  <span class="n">e</span><span class="p">[</span><span class="mi">31</span><span class="p">]</span> <span class="o">&amp;=</span> <span class="mi">127</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-872 line"><span class="lineno">872 </span>  <span class="n">e</span><span class="p">[</span><span class="mi">31</span><span class="p">]</span> <span class="o">|=</span> <span class="mi">64</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-873 line"><span class="lineno">873 </span><sup class="after"></sup>\n' + 
'</span><span class="line-874 line"><span class="lineno">874 </span>  <span class="n">fexpand</span><span class="p">(</span><span class="n">bp</span><span class="p">,</span> <span class="n">basepoint</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-875 line"><span class="lineno">875 </span>  <span class="n">cmult</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">bp</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-876 line"><span class="lineno">876 </span>  <span class="n">crecip</span><span class="p">(</span><span class="n">zmone</span><span class="p">,</span> <span class="n">z</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-877 line"><span class="lineno">877 </span>  <span class="n">fmul</span><span class="p">(</span><span class="n">z</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">zmone</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-878 line"><span class="lineno">878 </span>  <span class="n">fcontract</span><span class="p">(</span><span class="n">mypublic</span><span class="p">,</span> <span class="n">z</span><span class="p">);</span><sup class="after"></sup>\n' + 
'</span><span class="line-879 line"><span class="lineno">879 </span>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span><sup class="after"></sup>\n' + 
'</span><span class="line-880 line"><span class="lineno">880 </span><span class="p">}</span><sup class="after"></sup>\n' + 
'</span></div>'
